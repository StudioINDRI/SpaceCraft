<?xml version="1.0"?>
<Definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Prefabs>
    <Prefab xsi:type="MyObjectBuilder_PrefabDefinition">
      <Id Type="MyObjectBuilder_PrefabDefinition" Subtype="Terran Space Outpost" />
      <CubeGrids>
        <CubeGrid>
          <SubtypeName />
          <EntityId>116045243130504573</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="-60968.584888860962" y="-49842.939885452652" z="-70233.080568850652" />
            <Forward x="0.493223369" y="0.0584970452" z="-0.867933631" />
            <Up x="0.25113228" y="-0.9648304" z="0.07768403" />
            <Orientation>
              <X>-0.256920367</X>
              <Y>0.005010748</Y>
              <Z>0.957291543</Z>
              <W>-0.132512927</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Large</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_BatteryBlock">
              <SubtypeName>LargeBlockBatteryBlock</SubtypeName>
              <EntityId>83412014153475205</EntityId>
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <CustomName>Battery (100%)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <CurrentStoredPower>3</CurrentStoredPower>
              <ProducerEnabled>true</ProducerEnabled>
              <MaxStoredPower>0</MaxStoredPower>
              <SemiautoEnabled>false</SemiautoEnabled>
              <OnlyDischargeEnabled>false</OnlyDischargeEnabled>
              <ChargeMode>0</ChargeMode>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Assembler">
              <SubtypeName>BasicAssembler</SubtypeName>
              <EntityId>141352478011526910</EntityId>
              <Min x="-1" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Left" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_InventoryAggregate">
                      <InventoryId>Inventory</InventoryId>
                      <Inventories>
                        <MyObjectBuilder_InventoryBase xsi:type="MyObjectBuilder_Inventory">
                          <Items />
                          <nextItemId>0</nextItemId>
                          <Volume>2</Volume>
                          <Mass>9223372036854.775807</Mass>
                          <MaxItemCount>2147483647</MaxItemCount>
                          <Size xsi:nil="true" />
                          <InventoryFlags>CanReceive</InventoryFlags>
                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                        </MyObjectBuilder_InventoryBase>
                        <MyObjectBuilder_InventoryBase xsi:type="MyObjectBuilder_Inventory">
                          <Items />
                          <nextItemId>0</nextItemId>
                          <Volume>2</Volume>
                          <Mass>9223372036854.775807</Mass>
                          <MaxItemCount>2147483647</MaxItemCount>
                          <Size xsi:nil="true" />
                          <InventoryFlags>CanSend</InventoryFlags>
                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                        </MyObjectBuilder_InventoryBase>
                      </Inventories>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>true</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame10</TimerType>
                      <FramesFromLastTrigger>30</FramesFromLastTrigger>
                      <TimerTickInFrames>60</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Basic Assembler</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <CurrentProgress>0</CurrentProgress>
              <DisassembleEnabled>false</DisassembleEnabled>
              <RepeatAssembleEnabled>false</RepeatAssembleEnabled>
              <RepeatDisassembleEnabled>false</RepeatDisassembleEnabled>
              <SlaveEnabled>false</SlaveEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Refinery">
              <SubtypeName>Blast Furnace</SubtypeName>
              <EntityId>73129484020845833</EntityId>
              <Min x="-1" y="1" z="0" />
              <BlockOrientation Forward="Down" Up="Right" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_InventoryAggregate">
                      <InventoryId>Inventory</InventoryId>
                      <Inventories>
                        <MyObjectBuilder_InventoryBase xsi:type="MyObjectBuilder_Inventory">
                          <Items />
                          <nextItemId>0</nextItemId>
                          <Volume>4</Volume>
                          <Mass>9223372036854.775807</Mass>
                          <MaxItemCount>2147483647</MaxItemCount>
                          <Size xsi:nil="true" />
                          <InventoryFlags>CanReceive</InventoryFlags>
                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                        </MyObjectBuilder_InventoryBase>
                        <MyObjectBuilder_InventoryBase xsi:type="MyObjectBuilder_Inventory">
                          <Items />
                          <nextItemId>0</nextItemId>
                          <Volume>4</Volume>
                          <Mass>9223372036854.775807</Mass>
                          <MaxItemCount>2147483647</MaxItemCount>
                          <Size xsi:nil="true" />
                          <InventoryFlags>CanSend</InventoryFlags>
                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                        </MyObjectBuilder_InventoryBase>
                      </Inventories>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>true</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame10</TimerType>
                      <FramesFromLastTrigger>10</FramesFromLastTrigger>
                      <TimerTickInFrames>60</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Basic Refinery</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Refinery">
              <SubtypeName>Blast Furnace</SubtypeName>
              <EntityId>123575029147761487</EntityId>
              <Min x="-1" y="2" z="0" />
              <BlockOrientation Forward="Down" Up="Right" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_InventoryAggregate">
                      <InventoryId>Inventory</InventoryId>
                      <Inventories>
                        <MyObjectBuilder_InventoryBase xsi:type="MyObjectBuilder_Inventory">
                          <Items />
                          <nextItemId>0</nextItemId>
                          <Volume>4</Volume>
                          <Mass>9223372036854.775807</Mass>
                          <MaxItemCount>2147483647</MaxItemCount>
                          <Size xsi:nil="true" />
                          <InventoryFlags>CanReceive</InventoryFlags>
                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                        </MyObjectBuilder_InventoryBase>
                        <MyObjectBuilder_InventoryBase xsi:type="MyObjectBuilder_Inventory">
                          <Items />
                          <nextItemId>0</nextItemId>
                          <Volume>4</Volume>
                          <Mass>9223372036854.775807</Mass>
                          <MaxItemCount>2147483647</MaxItemCount>
                          <Size xsi:nil="true" />
                          <InventoryFlags>CanSend</InventoryFlags>
                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                        </MyObjectBuilder_InventoryBase>
                      </Inventories>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>true</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame10</TimerType>
                      <FramesFromLastTrigger>50</FramesFromLastTrigger>
                      <TimerTickInFrames>60</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Basic Refinery 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Drill">
              <SubtypeName>LargeBlockDrill</SubtypeName>
              <EntityId>96183286331898043</EntityId>
              <Min x="-1" y="3" z="0" />
              <BlockOrientation Forward="Right" Up="Forward" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>23.4375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Drill</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Drill">
              <SubtypeName>LargeBlockDrill</SubtypeName>
              <EntityId>96801055133507753</EntityId>
              <Min x="-1" y="3" z="1" />
              <BlockOrientation Forward="Right" Up="Forward" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>23.4375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Drill 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_LargeGatlingTurret">
              <SubtypeName />
              <EntityId>81846116489627630</EntityId>
              <Min x="-4" y="2" z="-1" />
              <BlockOrientation Forward="Up" Up="Left" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.384</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>true</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame10</TimerType>
                      <FramesFromLastTrigger>0</FramesFromLastTrigger>
                      <TimerTickInFrames>10</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Gatling Turret</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsShooting>false</IsShooting>
              <IsShootingFromTerminal>false</IsShootingFromTerminal>
              <IsLargeTurret>true</IsLargeTurret>
              <MinFov>0.1</MinFov>
              <MaxFov>1.04719758</MaxFov>
              <Range>800</Range>
              <RemainingAmmo>0</RemainingAmmo>
              <Target>0</Target>
              <IsPotentialTarget>true</IsPotentialTarget>
              <PreviousControlledEntityId xsi:nil="true" />
              <Rotation>0</Rotation>
              <Elevation>0</Elevation>
              <GunBase>
                <CurrentAmmoMagazineName>NATO_25x184mm</CurrentAmmoMagazineName>
                <RemainingAmmosList />
                <LastShootTime>0</LastShootTime>
              </GunBase>
              <EnableIdleRotation>true</EnableIdleRotation>
              <PreviousIdleRotationState>true</PreviousIdleRotationState>
              <TargetCharacters>true</TargetCharacters>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
              <SubtypeName>Connector</SubtypeName>
              <EntityId>117257283538378528</EntityId>
              <Min x="-1" y="4" z="0" />
              <BlockOrientation Forward="Up" Up="Left" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <DeformationRatio>0.5</DeformationRatio>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>8</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>true</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame10</TimerType>
                      <FramesFromLastTrigger>30</FramesFromLastTrigger>
                      <TimerTickInFrames>80</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Connector</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <MasterToSlaveTransform xsi:nil="true" />
              <MasterToSlaveGrid xsi:nil="true" />
              <IsMaster>true</IsMaster>
              <TradingEnabled>false</TradingEnabled>
              <AutoUnlockTime>0</AutoUnlockTime>
              <TimeOfConnection>0</TimeOfConnection>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Drill">
              <SubtypeName>LargeBlockDrill</SubtypeName>
              <EntityId>104285430290332886</EntityId>
              <Min x="-1" y="3" z="-1" />
              <BlockOrientation Forward="Right" Up="Down" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>23.4375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Drill 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="-2" y="1" z="0" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="-3" y="1" z="0" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="-4" y="1" z="0" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="-5" y="1" z="0" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="-6" y="1" z="0" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="-7" y="1" z="0" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="-8" y="1" z="0" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>LargeProgrammableBlock</SubtypeName>
              <EntityId>116754999387403903</EntityId>
              <Min x="-2" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Programmable block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>
// Isy's Solar Alignment Script
// ============================
// Version: 4.3.2
// Date: 2020-04-28

// =======================================================================================
//                                                                            --- Configuration ---
// =======================================================================================

// --- Essential Configuration ---
// =======================================================================================

// Name of the group with all the solar related rotors (not needed in gyro mode)
string rotorGroupName = "Solar Rotors";

// By enabling gyro mode, the script will no longer use rotors but all gyroscopes on the grid instead.
// This mode only makes sense when used on a SHIP in SPACE. Gyro mode deactivates the following
// features: night mode, rotate to sunrise, time calculation and triggering external timer blocks.
bool useGyroMode = false;

// Name of the reference group for gyro mode. Put your main cockpit, flight seat or remote control in this group!
string referenceGroupName = "Solar Reference";


// --- Rotate to sunrise ---
// =======================================================================================

// Rotate the panels towards the sunrise during the night? (Possible values: true | false, default: true)
// The angle is figured out automatically based on the first lock of the day.
// If you want to set the angles yourself, set manualAngle to true and adjust the angles to your likings.
bool rotateToSunrise = true;
bool manualAngle = false;
int manualAngleVertical = 0;
int manualAngleHorizontal = 0;


// --- Power fallback ---
// =======================================================================================

// With this option, you can enable your reactors and hydrogen engines as a safety fallback, if not enough power is available
// to power all your machines or if the battery charge gets low. By default, all reactors and hydrogen engines
// on the same grid will be used. If you only want to use specific ones, put their names or group in the list.
// Example: string[] fallbackDevices = { "Small Reactor 1", "Base reactor group", "Hydrogen Engine" };
bool useReactorFallback = false;
bool useHydrogenEngineFallback = false;
string[] fallbackDevices = { };

// Activation order
// By default, the hydrogen engine will be turned on first and the reactors after that if still not enough power is available.
// Set this value to false, and the reactors will be used first.
bool activateHydrogenEngineFirst = true;

// Activation on low battery?
// The fallback devices will be active until 'turnOffAtPercent' of the max battery charge after it was turned on at 'turnOnAtPercent'.
bool activateOnLowBattery = true;
double turnOnAtPercent = 10;
double turnOffAtPercent = 15;

// Activate on overload?
// If the combined output of batteries, solar panels and wind turbines is more than 'overloadPercentage' of their max output, the fallback devices will be turned on.
bool activateOnOverload = true;
double overloadPercentage = 90;


// --- Base Light Management ---
// =======================================================================================

// Enable base light management? (Possible values: true | false, default: false)
// Lights will be turned on/off based on daytime.
bool baseLightManagement = false;

// Simple mode: toggle lights based on max. solar output (percentage). Time based toggle will be deactivated.
bool simpleMode = false;
int simpleThreshold = 50;

// Define the times when your lights should be turned on or off. If simple mode is active, this does nothing.
int lightOffHour = 8;
int lightOnHour = 18;

// To only toggle specific lights, declare groups for them.
// Example: string[] baseLightGroups = { "Interior Lights", "Spotlights", "Hangar Lights" };
string[] baseLightGroups = { };


// --- LCD panels ---
// =======================================================================================

// To display the main script informations, add the following keyword to any LCD name (default: !ISA-main).
// You can enable or disable specific informations on the LCD by editing its custom data.
string mainLcdKeyword = "!ISA-main";

// To display compact stats (made for small screens, add the following keyword to any LCD name (default: !ISA-compact).
string compactLcdKeyword = "!ISA-compact";

// To display all current warnings and problems, add the following keyword to any LCD name (default: !ISA-warnings).
string warningsLcdKeyword = "!ISA-warnings";

// To display the script performance, add the following keyword to any LCD name (default: !ISA-performance).
string performanceLcdKeyword = "!ISA-performance";

// Default font ("Debug" or "Monospace") and fontsize for new LCDs
string defaultFont = "Debug";
float defaultFontSize = 0.6f;


// --- Terminal statistics ---
// =======================================================================================

// The script can display informations in the names of the used blocks. The shown information is a percentage of
// the current efficiency (solar panels and oxygen farms) or the fill level (batteries and tanks).
// You can enable or disable single statistics or disable all using the master switch below.
bool enableTerminalStatistics = true;

bool showSolarStats = true;
bool showWindTurbineStats = true;
bool showBatteryStats = true;
bool showOxygenFarmStats = true;
bool showOxygenTankStats = true;


// --- External timer blocks ---
// =======================================================================================

// Trigger external timer blocks at specific events? (action "Start" will be applied which takes the delay into account)
// Events can be: "sunrise", "sunset", a time like "15:00" or a number for every X seconds
// Every event needs a timer block name in the exact same order as the events.
// Calling the same timer block with multiple events requires it's name multiple times in the timers list!
// Example:
// string[] events = { "sunrise", "sunset", "15:00", "30" };
// string[] timers = { "Timer 1", "Timer 1", "Timer 2", "Timer 3" };
// This will trigger "Timer 1" at sunrise and sunset, "Timer 2" at 15:00 and "Timer 3" every 30 seconds.
bool triggerTimerBlock = false;
string[] events = { };
string[] timers = { };


// --- Settings for enthusiasts ---
// =======================================================================================

// Change percentage of the last locked output where the script should realign for a new best output (default: 1, gyro: 2)
double realginPercentageRotor = 1;
double realignPercentageGyro = 2;

// Percentage of the max detected output where the script starts night mode (default: 10)
double nightPercentage = 10;

// Percentage of the max detected output where the script detects night for time calculation (default: 50)
double nightTimePercentage = 50;

// Rotor speeds (speeds are automatically scaled between these values based on the output)
const float rotorMinSpeed = 0.05f;
const float rotorMaxSpeed = 1.0f;

// Rotor options
float rotorTorqueLarge = 33600000f;
float rotorTorqueSmall = 448000f;
bool setInertiaTensor = true;
bool setRotorLockWhenStopped = false;

// Min gyro RPM, max gyro RPM and gyro power for gyro mode
const double minGyroRPM = 0.1;
const double maxGyroRPM = 1;
const float gyroPower = 1f;

// Automatically pause aligning while using gyro mode and sitting in the cockpit?
bool autoPauseGyroMode = true;


// =======================================================================================
//                                                                      --- End of Configuration ---
//                                                        Don't change anything beyond this point!
// =======================================================================================


float Ǧ=0;float ǧ=0;float Ǩ=0;float ǩ=0;float Ǫ=0;float ǫ=0;List&lt;IMyMotorStator&gt;Ǭ=new List&lt;IMyMotorStator&gt;();List&lt;
IMyMotorStator&gt;ǭ=new List&lt;IMyMotorStator&gt;();List&lt;IMyMotorStator&gt;Ǯ=new List&lt;IMyMotorStator&gt;();List&lt;IMyGyro&gt;ǯ=new List&lt;IMyGyro&gt;();List&lt;
IMyTextPanel&gt;ǰ=new List&lt;IMyTextPanel&gt;();List&lt;IMyTerminalBlock&gt;Ǳ=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;ǲ=new List&lt;
IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;Ǵ=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;ǳ=new List&lt;IMyTerminalBlock&gt;();List&lt;
IMyInteriorLight&gt;ǥ=new List&lt;IMyInteriorLight&gt;();List&lt;IMyReflectorLight&gt;ǣ=new List&lt;IMyReflectorLight&gt;();List&lt;IMyPowerProducer&gt;ǐ=new List&lt;
IMyPowerProducer&gt;();int Ǒ=0;int ǒ=0;int Ǔ=0;int ǔ=0;List&lt;IMySolarPanel&gt;Ǖ=new List&lt;IMySolarPanel&gt;();int ǖ=0;bool Ǘ=false;bool ǘ=false;int
Ǚ=30;int ǚ=90;int Ǜ=10;bool ǜ=true;List&lt;string&gt;ǝ=new List&lt;string&gt;{"output=0","outputLast=0","outputLocked=0",
"outputMax=0","outputMaxAngle=0","outputMaxDayBefore=0","outputBestPanel=0","direction=1","directionChanged=0","directionTimer=0",
"allowRotation=1","rotationDone=1","timeSinceRotation=0","firstLockOfDay=0","sunriseAngle=0"};List&lt;IMyShipController&gt;Ǟ=new List&lt;
IMyShipController&gt;();double ǟ=0;double Ǡ=0;double ǡ=0;double Ǣ=1;double Ǥ=1;double Ǐ=1;bool ǎ=false;bool Ƨ=false;bool Ƒ=false;double ƒ=0;
double Ɠ=0;double Ɣ=0;bool ƕ=true;bool Ɩ=true;bool Ɨ=true;double Ƙ=0;double ƙ=0;double ƚ=0;List&lt;IMyBatteryBlock&gt;ƛ=new List&lt;
IMyBatteryBlock&gt;();float Ɯ=0;float Ɲ=0;float ƞ=0;float Ɵ=0;float Ơ=0;float ơ=0;List&lt;IMyOxygenFarm&gt;Ƣ=new List&lt;IMyOxygenFarm&gt;();List&lt;
IMyGasTank&gt;ƣ=new List&lt;IMyGasTank&gt;();double ƥ=0;double Ɛ=0;double Ż=0;int Ƅ=0;List&lt;IMyPowerProducer&gt;ż=new List&lt;IMyPowerProducer&gt;();
float Ž=0;float ž=0;string ſ="0 kW";string ƀ="0 kW";string Ɓ="0 kW";string Ƃ="0 kW";string ƃ="0 kW";string ƅ="0 kW";string Ǝ=
"0 kW";string Ɔ="0 kW";string Ƈ="0 kW";string ƈ="0 kW";string Ɖ="0 kW";string Ɗ="0 L";string Ƌ="0 L";string ƌ=
"Checking setup...";string ƍ;string Ƥ;string[]Ə={"/","-","\\","|"};int Ʀ=0;int ƺ=0;int ƻ=270;const int Ƽ=7200;int ƽ=Ƽ;const int ƾ=Ƽ/2;int ƿ
=ƾ;string[]œ={"showHeading=true","showWarnings=true","showCurrentOperation=true","showSolarStats=true",
"showTurbineStats=true","showBatteryStats=true","showOxygenStats=true","showLocationTime=true","scrollTextIfNeeded=true"};string[]ǀ={
"showSolarStats=false","showTurbineStats=false","showBatteryStats=false","showOxygenStats=false","showLocationTime=false","showRealTime=false"
,"scrollTextIfNeeded=false"};string[]ǁ={"showHeading=true","scrollTextIfNeeded=true"};bool ǂ=false;bool ǃ=false;bool Ǆ=
false;int ǅ=0;int ǆ=0;double Ǉ=0;string ǈ="";string č;int ǉ=0;bool Ǌ=false;HashSet&lt;string&gt;ǋ=new HashSet&lt;string&gt;();HashSet&lt;
string&gt;Ǎ=new HashSet&lt;string&gt;();string ǌ="align";int ƹ=3;bool Ƹ=false;string ƨ="both";bool Ʃ=false;double ƪ=0;double ƫ=0;int Ƭ=
0;int ƭ=0;int Ʈ=1;bool Ư=true;bool ư=true;int Ʊ=0;string[]Ʋ={"Get blocks","Get block stats","Time Calculation",
"Rotation Logic","Reactor Fallback"};Program(){µ();realginPercentageRotor=(realginPercentageRotor%100)/100;realignPercentageGyro=(
realignPercentageGyro%100)/100;nightPercentage=(nightPercentage%100)/100;nightTimePercentage=(nightTimePercentage%100)/100;Runtime.
UpdateFrequency=UpdateFrequency.Update10;}void Main(string Ƴ){if(ǉ&gt;=10){throw new Exception(
"Too many errors. Please recompile!\n\nScript stoppped!\n");}try{ś("",true);if(Ƴ!=""){ǌ=Ƴ.ToLower();Ʈ=3;}if(Ư){Ƶ();ȅ(false);P();Ư=false;}if(ƭ&lt;Ƭ){ƭ++;return;}if(ư){if(Ʊ==0)õ();if(
Ʊ==1)ď();if(Ʊ==2)Ċ();if(Ʊ==3)Ď();if(Ʊ&gt;3)Ʊ=0;ư=false;return;}if(Ʈ==0||Ǌ){Ƶ();Ǌ=false;if(Ʈ==0){ś(Ʋ[Ʈ]);º();Ʈ++;}return;}ƭ=0
;ư=true;if(Ʈ==1){ɋ();}if(Ʈ==2&amp;&amp;!useGyroMode){X();if(baseLightManagement)B();if(triggerTimerBlock)G();}if(Ʈ==3){if(!Ȯ(ǌ)){
if(useGyroMode){Ⱦ();}else{Ƀ();}}}if(Ʈ==4){if(useReactorFallback||useHydrogenEngineFallback)y();foreach(var Ă in Ǭ){double
ƴ=Ɉ(Ă,"output");ɉ(Ă,"outputLast",ƴ);}ǩ=Ǩ;Save();}ś(Ʋ[Ʈ]);º();if(Ʈ&gt;=4){Ʈ=0;ǋ=new HashSet&lt;string&gt;(Ǎ);Ǎ.Clear();if(ǉ&gt;0)ǉ--;
if(ǋ.Count==0)č=null;Ƥ=ƍ;ƍ="";}else{Ʈ++;}Ʀ=Ʀ&gt;=3?0:Ʀ+1;}catch(NullReferenceException){ǉ++;Ǌ=true;N(
"Execution of script step aborted:\n"+Ʋ[Ʈ]+" (ID: "+Ʈ+")\n\nCached block not available..");}catch(Exception e){ǉ++;Ǌ=true;N(
"Critical error in script step:\n"+Ʋ[Ʈ]+" (ID: "+Ʈ+")\n\n"+e);}}void Ƶ(){if(š==null){ţ(Me.CubeGrid);}if(!useGyroMode){var ƶ=GridTerminalSystem.
GetBlockGroupWithName(rotorGroupName);if(ƶ!=null){ƶ.GetBlocksOfType&lt;IMyMotorStator&gt;(Ǭ);if(Ǭ.Count==0){N(
"There are no rotors in the rotor group:\n'"+rotorGroupName+"'");}}else{N("Rotor group not found:\n'"+rotorGroupName+"'");}HashSet&lt;IMyCubeGrid&gt;Ʒ=new HashSet&lt;
IMyCubeGrid&gt;();foreach(var Ă in Ǭ){if(!Ă.IsFunctional)N("'"+Ă.CustomName+"' is broken!\nRepair it to use it for aligning!");if(!Ă.
Enabled)N("'"+Ă.CustomName+"' is turned off!\nTurn it on to use it for aligning!");if(!Ă.IsAttached)N("'"+Ă.CustomName+
"' has no rotor head!\nAdd one to use it for aligning!");Ʒ.Add(Ă.CubeGrid);if(Ă.CubeGrid.GridSize==0.5){Ă.Torque=rotorTorqueSmall;}else{Ă.Torque=rotorTorqueLarge;}if(Ă.
GetOwnerFactionTag()!=Me.GetOwnerFactionTag()){N("'"+Ă.CustomName+
"' has a different owner / faction!\nAll blocks should have the same owner / faction!");}}ǭ.Clear();Ǯ.Clear();foreach(var Ă in Ǭ){if(Ʒ.Contains(Ă.TopGrid)){ǭ.Add(Ă);}else{Ǯ.Add(Ă);if(Ă.CubeGrid!=š&amp;&amp;
setInertiaTensor){try{Ă.SetValueBool("ShareInertiaTensor",true);}catch(Exception){}}}}List&lt;IMyMotorStator&gt;ǵ=new List&lt;IMyMotorStator&gt;();ǵ
.AddRange(Ǯ);Ǯ.Clear();bool ȶ;foreach(var ȷ in ǵ){ȶ=true;foreach(var Ă in Ǯ){if(Ă.TopGrid==ȷ.TopGrid){ȷ.RotorLock=false;ȷ
.TargetVelocityRPM=0f;ȷ.Torque=0f;ȷ.BrakingTorque=0f;ȶ=false;break;}}if(ȶ)Ǯ.Add(ȷ);}Ǖ.Clear();Ƣ.Clear();foreach(var Ƕ in
Ǯ){Ǧ=0;ǧ=0;ř(Ƕ.TopGrid,true);var ȸ=new List&lt;IMySolarPanel&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt;(ȸ,ȹ=&gt;ť.
Contains(ȹ.CubeGrid)&amp;&amp;ȹ.IsWorking);var Ⱥ=new List&lt;IMyOxygenFarm&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt;(Ⱥ,Ȼ=&gt;ť.
Contains(Ȼ.CubeGrid)&amp;&amp;Ȼ.IsWorking);foreach(var Q in ȸ){Ǖ.Add(Q);Ǧ+=Q.MaxOutput;if(Q.MaxOutput&gt;ǧ)ǧ=Q.MaxOutput;}foreach(var z in
Ⱥ){Ƣ.Add(z);Ǧ+=z.GetOutput();if(z.GetOutput()&gt;ǧ)ǧ=z.GetOutput();}if(ȸ.Count==0&amp;&amp;Ⱥ.Count==0){N("'"+Ƕ.CustomName+
"' can't see the sun!\nAdd a solar panel or oxygen farm to it!");}ɉ(Ƕ,"output",Ǧ);ɉ(Ƕ,"outputBestPanel",ǧ);if(Ǧ&gt;Ɉ(Ƕ,"outputMax")){ɉ(Ƕ,"outputMax",Ǧ);ɉ(Ƕ,"outputMaxAngle",ā(Ƕ));}}
foreach(var ȓ in ǭ){double ȕ=0;ǧ=float.MaxValue;foreach(var Ƕ in Ǯ){if(Ƕ.CubeGrid==ȓ.TopGrid){ȕ+=Ɉ(Ƕ,"output");if(Ɉ(Ƕ,
"outputBestPanel")&lt;ǧ)ǧ=(float)Ɉ(Ƕ,"outputBestPanel");}}ɉ(ȓ,"output",ȕ);ɉ(ȓ,"outputBestPanel",ǧ);if(ȕ&gt;Ɉ(ȓ,"outputMax")){ɉ(ȓ,"outputMax",ȕ)
;ɉ(ȓ,"outputMaxAngle",ā(ȓ));}}}if(useGyroMode){if(Me.CubeGrid.IsStatic){N(
"The grid is stationary!\nConvert it to a ship in the Info tab!");}var ȼ=GridTerminalSystem.GetBlockGroupWithName(referenceGroupName);if(ȼ!=null){ȼ.GetBlocksOfType&lt;IMyShipController&gt;(Ǟ
);if(Ǟ.Count==0){N("There are no cockpits, flight seats or remote controls in the reference group:\n'"+referenceGroupName
+"'");}}else{N("Reference group not found!\nPut your main cockpit, flight seat or remote control in a group called '"+
referenceGroupName+"'!");}GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt;(ǯ,ȧ=&gt;ȧ.IsSameConstructAs(Me)&amp;&amp;ȧ.IsWorking);if(ǯ.Count==0){N(
"No gyroscopes found!\nAre they enabled and completely built?");}GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt;(Ǖ,ȹ=&gt;ȹ.IsSameConstructAs(Me)&amp;&amp;ȹ.IsWorking);GridTerminalSystem.
GetBlocksOfType&lt;IMyOxygenFarm&gt;(Ƣ,Ȼ=&gt;Ȼ.IsSameConstructAs(Me)&amp;&amp;Ȼ.IsWorking);}if(ǖ!=Ǖ.Count||Ƅ!=Ƣ.Count){foreach(var Ă in Ǭ){ɉ(Ă,
"outputMax",0);}Ǫ=0;ǖ=Ǖ.Count;Ƅ=Ƣ.Count;N("Amount of solar panels or oxygen farms changed!\nRestarting..");}if(Ǖ.Count==0&amp;&amp;Ƣ.Count
==0){N("No solar panels or oxygen farms found!\nHow should I see the sun now?");}ƛ.Clear();GridTerminalSystem.
GetBlocksOfType&lt;IMyBatteryBlock&gt;(ƛ,Ŗ=&gt;Ŗ.IsSameConstructAs(Me)&amp;&amp;Ŗ.IsWorking);if(ƛ.Count==0){N(
"No batteries found!\nDon't you want to store your Power?");}ż.Clear();GridTerminalSystem.GetBlocksOfType&lt;IMyPowerProducer&gt;(ż,Ƚ=&gt;Ƚ.BlockDefinition.TypeIdString.Contains(
"WindTurbine")&amp;&amp;Ƚ.IsSameConstructAs(Me)&amp;&amp;Ƚ.IsWorking);ƣ.Clear();GridTerminalSystem.GetBlocksOfType&lt;IMyGasTank&gt;(ƣ,Ƚ=&gt;!Ƚ.
BlockDefinition.SubtypeId.Contains("Hydrogen")&amp;&amp;Ƚ.IsSameConstructAs(Me)&amp;&amp;Ƚ.IsWorking);if(useReactorFallback||useHydrogenEngineFallback)
{ǐ.Clear();foreach(var L in fallbackDevices){var ȵ=GridTerminalSystem.GetBlockGroupWithName(L);if(ȵ!=null){var ȴ=new List
&lt;IMyPowerProducer&gt;();ȵ.GetBlocksOfType&lt;IMyPowerProducer&gt;(ȴ,ȧ=&gt;ȧ.BlockDefinition.TypeIdString.Contains("Reactor")||ȧ.
BlockDefinition.TypeIdString.Contains("HydrogenEngine"));ǐ.AddRange(ȴ);}else{IMyPowerProducer Ȩ=GridTerminalSystem.GetBlockWithName(L)
as IMyPowerProducer;if(Ȩ!=null){ǐ.Add(Ȩ);}else{N("Power fallback device not found:\n'"+L+"'");}}}if(ǐ.Count==0){
GridTerminalSystem.GetBlocksOfType&lt;IMyPowerProducer&gt;(ǐ,ȧ=&gt;(ȧ.BlockDefinition.TypeIdString.Contains("Reactor")||ȧ.BlockDefinition.
TypeIdString.Contains("HydrogenEngine"))&amp;&amp;ȧ.IsSameConstructAs(Me)&amp;&amp;ȧ.IsFunctional);}if(!useReactorFallback)ǐ.RemoveAll(ȧ=&gt;ȧ.
BlockDefinition.TypeIdString.Contains("Reactor"));if(!useHydrogenEngineFallback)ǐ.RemoveAll(ȧ=&gt;ȧ.BlockDefinition.TypeIdString.Contains(
"HydrogenEngine"));ǅ=ǐ.Count(ȧ=&gt;ȧ.BlockDefinition.TypeIdString.Contains("Reactor"));ǆ=ǐ.Count(ȧ=&gt;ȧ.BlockDefinition.TypeIdString.Contains
("HydrogenEngine"));}if(baseLightManagement){ǥ.Clear();ǣ.Clear();if(baseLightGroups.Length&gt;0){var ȩ=new List&lt;
IMyInteriorLight&gt;();var Ȫ=new List&lt;IMyReflectorLight&gt;();foreach(var ȫ in baseLightGroups){var Ȭ=GridTerminalSystem.GetBlockGroupWithName
(ȫ);if(Ȭ!=null){Ȭ.GetBlocksOfType&lt;IMyInteriorLight&gt;(ȩ);ǥ.AddRange(ȩ);Ȭ.GetBlocksOfType&lt;IMyReflectorLight&gt;(Ȫ);ǣ.AddRange(Ȫ
);}else{N("Light group not found:\n'"+ȫ+"'");}}}else{GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt;(ǥ,ȭ=&gt;ȭ.
IsSameConstructAs(Me));GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt;(ǣ,ȭ=&gt;ȭ.IsSameConstructAs(Me));}}Ǳ=Œ(mainLcdKeyword,œ);ǲ=Œ(
compactLcdKeyword,ǀ);Ǵ=Œ(warningsLcdKeyword,ǁ);ǳ=Œ(performanceLcdKeyword,ǁ);}bool Ȯ(string ȯ){bool Ȱ=true;if(ȯ=="pause"){ȅ();if(Ƹ){ǌ=
"align";Ƹ=false;return false;}else{ǌ="paused";Ƹ=true;}ƌ="Automatic alignment paused.\n";ƌ+="Run 'pause' again to continue..";}
else if(ȯ=="paused"){ƌ="Automatic alignment paused.\n";ƌ+="Run 'pause' again to continue..";}else if(ȯ=="realign"&amp;&amp;!
useGyroMode){ȥ();ƌ="Forced realign by user.\n";ƌ+="Searching highest output for "+ǚ+" more seconds.";if(ǚ==0){ǌ="";ǚ=90;}else{ǚ-=1;
}}else if(ȯ=="realign"&amp;&amp;useGyroMode){ƌ="Forced realign by user.\n";ƌ+="Resetted stored values and starting to pitch.";ȃ()
;ǟ=0;Ƙ=999;ƕ=true;ǡ=0;Ǡ=0;Ǫ=0;ǌ="";}else if(ȯ=="reset"&amp;&amp;!useGyroMode){ƺ=0;ƻ=270;ƿ=ƾ;ƽ=Ƽ;ƌ="Calculated time resetted.\n";ƌ
+="Continuing in "+ƹ+" seconds.";if(ƹ==0){ǌ="";ƹ=3;}else{ƹ-=1;}}else if(ȯ.Contains("rotate")&amp;&amp;!useGyroMode){String[]ȱ=ȯ.
Split(' ');bool Ȳ=false;ƨ="both";Ʃ=false;if(ȱ[0].Contains("pause"))Ʃ=true;if(ȱ.Length==2){if(ȱ[1].Contains("h")){Ȳ=Double.
TryParse(ȱ[1].Replace("h",""),out ƪ);ƨ="horizontalOnly";}else if(ȱ[1].Contains("v")){Ȳ=Double.TryParse(ȱ[1].Replace("v",""),out
ƫ);ƨ="verticalOnly";}if(Ȳ){ƌ="Checking rotation parameters...";ǌ="rotNormal";}else{ȅ();N(
"Wrong format!\n\nShould be (e.g. 90 degrees):\nrotate h90 OR\nrotate v90");}}else if(ȱ.Length==3){string ȳ="rotNormal";if(ȱ[1].Contains("v")){Ȳ=Double.TryParse(ȱ[1].Replace("v",""),out ƫ);if(Ȳ)
Ȳ=Double.TryParse(ȱ[2].Replace("h",""),out ƪ);ȳ="rotVH1";}else{Ȳ=Double.TryParse(ȱ[1].Replace("h",""),out ƪ);if(Ȳ)Ȳ=
Double.TryParse(ȱ[2].Replace("v",""),out ƫ);}if(Ȳ){ƌ="Checking rotation parameters...";ǌ=ȳ;}else{ȅ();N(
"Wrong format!\n\nShould be (e.g. 90 degrees):\nrotate h90 v90 OR\nrotate v90 h90");}}else{ȅ();N("Not enough parameters!\n\nShould be 2 or 3:\nrotate h90 OR\nrotate h90 v90");}}else if(ȯ=="rotNormal"){ƌ
="Rotating to user defined values...";bool Ȃ=ȟ(ƨ,ƪ,ƫ);if(Ȃ&amp;&amp;Ʃ){ǌ="paused";}else if(Ȃ&amp;&amp;!Ʃ){ǌ="resume";}}else if(ȯ==
"rotVH1"){ƌ="Rotating to user defined values...";bool Ȃ=ȟ("verticalOnly",ƪ,ƫ);if(Ȃ)ǌ="rotVH2";}else if(ȯ=="rotVH2"){ƌ=
"Rotating to user defined values...";bool Ȃ=ȟ("horizontalOnly",ƪ,ƫ);if(Ȃ&amp;&amp;Ʃ){ǌ="paused";}else if(Ȃ&amp;&amp;!Ʃ){ǌ="resume";}}else{Ȱ=false;}return Ȱ;}double Ɉ(
IMyTerminalBlock ú,string ġ){Ɋ(ú);var Ĝ=ú.CustomData.Split('\n').ToList();int ě=Ĝ.FindIndex(S=&gt;S.StartsWith(ġ+"="));if(ě&gt;-1){return
Convert.ToDouble(Ĝ[ě].Replace(ġ+"=",""));}return 0;}void ɉ(IMyTerminalBlock ú,string ġ,double Û){Ɋ(ú);var Ĝ=ú.CustomData.Split(
'\n').ToList();int ě=Ĝ.FindIndex(S=&gt;S.StartsWith(ġ+"="));if(ě&gt;-1){Ĝ[ě]=ġ+"="+Û;ú.CustomData=String.Join("\n",Ĝ);}}void Ɋ(
IMyTerminalBlock ú){var Ĝ=ú.CustomData.Split('\n').ToList();if(Ĝ.Count!=ǝ.Count){ú.CustomData=String.Join("\n",ǝ);}}void ɋ(){Ǩ=0;ǫ=0;
foreach(var Q in Ǖ){Ǩ+=Q.MaxOutput;ǫ+=Q.CurrentOutput;if(showSolarStats&amp;&amp;enableTerminalStatistics){double Ɍ=0;double.TryParse(Q
.CustomData,out Ɍ);if(Ɍ&lt;Q.MaxOutput){Ɍ=Q.MaxOutput;Q.CustomData=Ɍ.ToString();}Ó(Q,true,"",Q.MaxOutput,Ɍ);}}foreach(var z
in Ƣ){Ǩ+=z.GetOutput()/1000000;}if(Ǩ&gt;Ǫ){Ǫ=Ǩ;}ſ=Ǩ.Ĺ();Ɓ=ǫ.Ĺ();ƀ=Ǫ.Ĺ();Ɯ=0;Ɲ=0;ƞ=0;Ɵ=0;Ơ=0;ơ=0;foreach(var R in ƛ){Ɯ+=R.
CurrentInput;Ɲ+=R.MaxInput;ƞ+=R.CurrentOutput;Ɵ+=R.MaxOutput;Ơ+=R.CurrentStoredPower;ơ+=R.MaxStoredPower;if(showBatteryStats&amp;&amp;
enableTerminalStatistics){string ü="";if(R.CurrentStoredPower&lt;R.MaxStoredPower*0.99){ü="Draining";if(R.CurrentInput&gt;R.CurrentOutput)ü=
"Recharging";}Ó(R,true,ü,R.CurrentStoredPower,R.MaxStoredPower);}}Ƃ=Ɯ.Ĺ();ƃ=Ɲ.Ĺ();ƅ=ƞ.Ĺ();Ǝ=Ɵ.Ĺ();Ɔ=Ơ.Ĺ(true);Ƈ=ơ.Ĺ(true);Ž=0;ž=0;
foreach(var ɇ in ż){Ž+=ɇ.CurrentOutput;ž+=ɇ.MaxOutput;if(showWindTurbineStats&amp;&amp;enableTerminalStatistics){Ó(ɇ,true,"",ɇ.
CurrentOutput,ɇ.MaxOutput);}}ƈ=Ž.Ĺ();Ɖ=ž.Ĺ();ƥ=0;Ɛ=0;Ż=0;foreach(var z in Ƣ){ƥ+=z.GetOutput();if(showOxygenFarmStats&amp;&amp;
enableTerminalStatistics){Ó(z,true,"",z.GetOutput(),1);}}ƥ=Math.Round(ƥ/Ƣ.Count*100,2);foreach(var T in ƣ){Ɛ+=T.Capacity;Ż+=T.Capacity*T.
FilledRatio;if(showOxygenTankStats&amp;&amp;enableTerminalStatistics){Ó(T,true,"",T.FilledRatio,1);}}Ɗ=Ɛ.ľ();Ƌ=Ż.ľ();}void Ⱦ(){if(ǯ.Count==
0)return;if(autoPauseGyroMode&amp;&amp;Ǟ[0].IsUnderControl){ȅ();ƌ="Automatic alignment paused.\n";ƌ+=
"Ship is currently controlled by a player.";return;}int Ǜ=10;bool ȿ=false;bool ɀ=false;bool Ɂ=false;string Ƿ="";double ȕ=Ǩ;double Ȉ=Ǫ==0?1:Ǫ;double ƴ=ǩ;bool ɂ=(ȕ==
0||ȕ&lt;=Ǫ*0.1);double Ǹ=maxGyroRPM-(maxGyroRPM-minGyroRPM)*(ȕ/Ȉ);Ǹ=Ǹ/(Math.PI*3);if((!ȕ.ŀ(ǟ-ǟ*realignPercentageGyro,ǟ+ǟ*
realignPercentageGyro)||ɂ)&amp;&amp;ƕ&amp;&amp;Ƙ&gt;=Ǜ){Ɩ=false;Ɨ=false;ǟ=0;if(ȕ&lt;ƴ&amp;&amp;ƒ==3&amp;&amp;!ǎ){Ǣ=-Ǣ;ƒ=0;ǎ=true;}ǹ((float)(Ǣ*Ǹ),0,0);if(Ǣ==-1){Ƿ="down";}else{Ƿ=
"up";}if((ȕ&lt;ƴ&amp;&amp;ƒ&gt;=4)||(ɂ&amp;&amp;ƒ&gt;60)){ȃ();Ɩ=true;Ɨ=true;ǟ=ȕ;Ǡ=ȕ;ǎ=false;ƒ=0;Ƙ=0;}else{ȿ=true;ƒ++;}}else if(ƕ){ȃ();Ɩ=true;Ɨ=true;ǎ
=false;ƒ=0;Ƙ++;}else{Ƙ++;}if((!ȕ.ŀ(ǡ-ǡ*realignPercentageGyro,ǡ+ǡ*realignPercentageGyro)||ɂ)&amp;&amp;Ɨ&amp;&amp;ƚ&gt;=Ǜ){ƕ=false;Ɩ=false;ǡ=0
;if(ȕ&lt;ƴ&amp;&amp;Ɣ==3&amp;&amp;!Ƒ){Ǐ=-Ǐ;Ɣ=0;Ƒ=true;}ǹ(0,0,(float)(Ǐ*Ǹ));if(Ǐ==-1){Ƿ="left";}else{Ƿ="right";}if(ȕ&lt;ƴ&amp;&amp;Ɣ&gt;=4){ȃ();ƕ=true;Ɩ=
true;ǡ=ȕ;Ƒ=false;Ɣ=0;ƚ=0;}else{Ɂ=true;Ɣ++;}}else if(Ɨ){ȃ();ƕ=true;Ɩ=true;Ƒ=false;Ɣ=0;ƚ++;}else{ƚ++;}if(!ȕ.ŀ(Ǡ-Ǡ*
realignPercentageGyro,Ǡ+Ǡ*realignPercentageGyro)&amp;&amp;Ɩ&amp;&amp;ƙ&gt;=Ǜ){ƕ=false;Ɨ=false;Ǡ=0;if(ȕ&lt;ƴ&amp;&amp;Ɠ==3&amp;&amp;!Ƨ){Ǥ=-Ǥ;Ɠ=0;Ƨ=true;}ǹ(0,(float)(Ǥ*Ǹ),0);if(Ǥ==-
1){Ƿ="left";}else{Ƿ="right";}if(ȕ&lt;ƴ&amp;&amp;Ɠ&gt;=4){ȃ();ƕ=true;Ɨ=true;Ǡ=ȕ;ǟ=ȕ;Ƨ=false;Ɠ=0;ƙ=0;}else{ɀ=true;Ɠ++;}}else if(Ɩ){ȃ();ƕ=
true;Ɨ=true;Ƨ=false;Ɠ=0;ƙ++;}else{ƙ++;}if(!ȿ&amp;&amp;!ɀ&amp;&amp;!Ɂ){if(ɂ){ƌ="No sun in sight! Realigning in "+(Ǜ-Ƙ)+"..";}else{ƌ=
"Aligned.";}}else if(ȿ){ƌ="Aligning by pitching the ship "+Ƿ+"..";}else if(ɀ){ƌ="Aligning by yawing the ship "+Ƿ+"..";}else if(Ɂ){
ƌ="Aligning by rolling the ship "+Ƿ+"..";}}void Ƀ(){if(Ǩ&lt;Ǫ*nightPercentage&amp;&amp;Ǚ&gt;=30){ƌ="Night Mode.";Ǘ=true;if(
rotateToSunrise&amp;&amp;!ǘ){if(manualAngle){ǘ=ȟ("both",manualAngleHorizontal,manualAngleVertical);}else{ǘ=ȟ("sunrise");}if(ǘ){foreach(var Ă in
Ǭ){ɉ(Ă,"firstLockOfDay",1);ɉ(Ă,"rotationDone",0);}}}else{ȅ();}return;}if(Ǘ){Ǘ=false;Ǚ=0;foreach(var Ă in Ǭ){ɉ(Ă,
"outputMaxDayBefore",Ɉ(Ă,"outputMax"));ɉ(Ă,"outputMax",0);}}else if(Ǚ&gt;172800){Ǚ=0;}else{Ǚ++;}ǘ=false;ǜ=true;Ǜ=Ǩ&lt;Ǫ*0.5?30:10;int ȣ=Ʉ(ǭ,true);
int Ȥ=Ʉ(Ǯ);if(ȣ==0&amp;&amp;Ȥ==0){ƌ="Aligned.";}else if(ȣ==0){ƌ="Aligning "+Ȥ+" horizontal rotors..";}else if(Ȥ==0){ƌ="Aligning "+ȣ
+" vertical rotors..";}else{ƌ="Aligning "+Ȥ+" horizontal and "+ȣ+" vertical rotors..";}}int Ʉ(List&lt;IMyMotorStator&gt;Ʌ,bool
Ɇ=false){int Ȧ=0;foreach(var Ă in Ʌ){double ȕ=Ɉ(Ă,"output");double ƴ=Ɉ(Ă,"outputLast");double ȇ=Ɉ(Ă,"outputLocked");
double Ȉ=Ɉ(Ă,"outputMax");double Ƿ=Ɉ(Ă,"direction");double ȉ=Ɉ(Ă,"directionChanged");double Ȋ=Ɉ(Ă,"directionTimer");double ȋ=Ɉ
(Ă,"allowRotation");double Ȍ=Ɉ(Ă,"timeSinceRotation");bool ȍ=false;if(ȋ==0||Ȍ&lt;Ǜ){ȁ(Ă);ɉ(Ă,"allowRotation",1);ɉ(Ă,
"timeSinceRotation",Ȍ+1);continue;}if(!ȕ.ŀ(ȇ-ȇ*realginPercentageRotor,ȇ+ȇ*realginPercentageRotor)){if(Ɇ){Ȕ(Ă,false);}else{Ȓ(Ă,false);}ȇ=0;
if(ȕ&lt;ƴ&amp;&amp;Ȋ==2&amp;&amp;ȉ==0){Ƿ=-Ƿ;Ȋ=0;ȉ=1;}if((Ă.LowerLimitDeg!=float.MinValue||Ă.UpperLimitDeg!=float.MaxValue)&amp;&amp;Ȋ&gt;=5){double Ȏ=ā(
Ă);float ȏ=(float)Math.Round(Ă.LowerLimitDeg);float Ȑ=(float)Math.Round(Ă.UpperLimitDeg);if(Ȏ==ȏ||Ȏ==360+ȏ||Ȏ==Ȑ||Ȏ==360+
Ȑ){if(ȕ&lt;ƴ&amp;&amp;ȉ==0){Ƿ=-Ƿ;Ȋ=0;ȉ=1;}else{ȍ=true;}}}bool ȑ=ȕ.ŀ(Ȉ*0.998,Ȉ*1.002);float Ǹ=(float)(rotorMaxSpeed-rotorMaxSpeed*ȕ.Ų
(Ȉ)+rotorMinSpeed);if(!ȑ)Ǹ+=rotorMinSpeed;Ǿ(Ă,Ƿ,Ǹ);if((ȕ&lt;ƴ&amp;&amp;!ȑ&amp;&amp;Ȋ&gt;=3)||ȕ==0||ȍ){ȁ(Ă);if(Ɉ(Ă,"firstLockOfDay")==1){if(ȕ&gt;Ɉ(
Ă,"outputMaxDayBefore")*0.9){ɉ(Ă,"firstLockOfDay",0);ɉ(Ă,"sunriseAngle",ā(Ă));}}ȇ=ȕ;ȉ=0;Ȋ=0;Ȍ=0;}else{Ȧ++;Ȋ++;}ɉ(Ă,
"outputLocked",ȇ);ɉ(Ă,"direction",Ƿ);ɉ(Ă,"directionChanged",ȉ);ɉ(Ă,"directionTimer",Ȋ);ɉ(Ă,"timeSinceRotation",Ȍ);}else{ȁ(Ă);}}return
Ȧ;}void Ȓ(IMyMotorStator Ă,bool Û){foreach(var ȓ in ǭ){if(Ă.CubeGrid==ȓ.TopGrid){if(Û){ɉ(ȓ,"allowRotation",1);}else{ȁ(ȓ);
ɉ(ȓ,"allowRotation",0);}}}}void Ȕ(IMyMotorStator Ă,bool Û){foreach(var Ƕ in Ǯ){if(Ă.TopGrid==Ƕ.CubeGrid){if(Û){ɉ(Ƕ,
"allowRotation",1);}else{ȁ(Ƕ);ɉ(Ƕ,"allowRotation",0);}}}}void Ǿ(IMyMotorStator Ă,double Ƿ,float Ǹ=rotorMinSpeed){Ă.RotorLock=false;Ă.
TargetVelocityRPM=Ǹ*(float)Ƿ;}void ǹ(double Ǻ,double ǻ,double Ǽ){Vector3D ǽ=new Vector3D(-Ǻ,ǻ,Ǽ);Vector3D ǿ=Vector3D.TransformNormal(ǽ,Ǟ[
0].WorldMatrix);foreach(var Ȅ in ǯ){Vector3D Ȁ=Vector3D.TransformNormal(ǿ,Matrix.Transpose(Ȅ.WorldMatrix));Ȅ.GyroOverride
=true;Ȅ.GyroPower=gyroPower;Ȅ.Pitch=(float)Ȁ.X;Ȅ.Yaw=(float)Ȁ.Y;Ȅ.Roll=(float)Ȁ.Z;}}void ȁ(IMyMotorStator Ă,bool Ȃ=true){
Ă.TargetVelocityRPM=0f;if(Ȃ){ɉ(Ă,"rotationDone",1);}else{ɉ(Ă,"rotationDone",0);}if(setRotorLockWhenStopped){Ă.RotorLock=
true;}}void ȃ(){foreach(var Ȅ in ǯ){Ȅ.Pitch=0;Ȅ.Yaw=0;Ȅ.Roll=0;Ȅ.GyroOverride=false;}}void ȅ(bool Ȃ=true){foreach(var Ă in Ǭ
){ȁ(Ă,Ȃ);ɉ(Ă,"timeSinceRotation",0);}ȃ();Ƙ=0;ƙ=0;ƚ=0;}bool Ȇ(IMyMotorStator Ă,double Ȝ,bool ȝ=true){double Ȏ=ā(Ă);bool Ȟ=
false;if(ȝ){if(Ă.CustomName.IndexOf("[90]")&gt;=0){Ȝ+=90;}else if(Ă.CustomName.IndexOf("[180]")&gt;=0){Ȝ+=180;}else if(Ă.CustomName
.IndexOf("[270]")&gt;=0){Ȝ+=270;}if(Ȝ&gt;=360)Ȝ-=360;if(Ă.Orientation.Up.ToString()=="Down"){Ȟ=true;}else if(Ă.Orientation.Up.
ToString()=="Backward"){Ȟ=true;}else if(Ă.Orientation.Up.ToString()=="Left"){Ȟ=true;}}if(Ă.LowerLimitDeg!=float.MinValue||Ă.
UpperLimitDeg!=float.MaxValue){if(Ȟ)Ȝ=-Ȝ;if(Ȝ&gt;Ă.UpperLimitDeg){Ȝ=Math.Floor(Ă.UpperLimitDeg);}if(Ȝ&lt;Ă.LowerLimitDeg){Ȝ=Math.Ceiling(Ă.
LowerLimitDeg);}}else{if(Ȟ)Ȝ=360-Ȝ;}if(Ȏ.ŀ(Ȝ-1,Ȝ+1)||Ȏ.ŀ(360+Ȝ-1,360+Ȝ+1)){ȁ(Ă);return true;}else{int Ƿ=Ȏ&lt;Ȝ?1:-1;if(Ȏ&lt;=90&amp;&amp;Ȝ&gt;=270){Ƿ=
-1;}if(Ȏ&gt;=270&amp;&amp;Ȝ&lt;=90){Ƿ=1;}Single Ǹ=Math.Abs(Ȏ-Ȝ)&gt;15?1f:0.2f;if(Math.Abs(Ȏ-Ȝ)&lt;3)Ǹ=0.1f;Ǿ(Ă,Ƿ,Ǹ);return false;}}bool ȟ(
string Ƞ,double ȡ=0,double Ȣ=0){bool Ȃ=true;int ȣ=0;int Ȥ=0;if(ǜ){ǜ=false;ȅ(false);}if(Ƞ!="verticalOnly"){foreach(var Ƕ in Ǯ){
if(Ɉ(Ƕ,"rotationDone")==1)continue;bool ȝ=true;double Ȝ=ȡ;if(Ƞ=="sunrise"){Ȝ=Ɉ(Ƕ,"sunriseAngle");ȝ=false;}if(!Ȇ(Ƕ,Ȝ,ȝ)){Ȃ=
false;Ȥ++;ƍ=Ȥ+" horizontal rotors are set to "+ȡ+"°";if(Ƞ=="sunrise")ƍ=Ȥ+" horizontal rotors are set to sunrise position";}}}
if(!Ȃ)return false;if(Ƞ!="horizontalOnly"){foreach(var ȓ in ǭ){if(Ɉ(ȓ,"rotationDone")==1)continue;bool ȝ=true;double Ȝ=Ȣ;
if(Ƞ=="sunrise"){Ȝ=Ɉ(ȓ,"sunriseAngle");ȝ=false;}if(!Ȇ(ȓ,Ȝ,ȝ)){Ȃ=false;ȣ++;ƍ=ȣ+" vertical rotors are set to "+Ȣ+"°";if(Ƞ==
"sunrise")ƍ=ȣ+" vertical rotors are set to sunrise position";}}}if(Ȃ)ǜ=true;return Ȃ;}void ȥ(){int Ȥ=0;int ȣ=0;if(ǚ==90){foreach(
var Ă in Ǭ){ȁ(Ă,false);double Ț=1;if(Ă.Orientation.Up.ToString()=="Up"){Ț=-1;}else if(Ă.Orientation.Up.ToString()==
"Forward"){Ț=-1;}else if(Ă.Orientation.Up.ToString()=="Right"){Ț=-1;}ɉ(Ă,"outputMax",Ɉ(Ă,"output"));ɉ(Ă,"direction",Ț);ɉ(Ă,
"directionChanged",0);ɉ(Ă,"directionTimer",0);Ǫ=0;}}foreach(var Ƕ in Ǯ){if(Ɉ(Ƕ,"rotationDone")==1)continue;double ȕ=Ɉ(Ƕ,"output");double ƴ
=Ɉ(Ƕ,"outputLast");double Ȉ=Ɉ(Ƕ,"outputMax");double Ȗ=Ɉ(Ƕ,"outputMaxAngle");double Ƿ=Ɉ(Ƕ,"direction");double ȉ=Ɉ(Ƕ,
"directionChanged");double Ȋ=Ɉ(Ƕ,"directionTimer");if(Ȉ==0)Ȉ=1;if(ȉ!=2){Ȥ++;if(ȕ&lt;ƴ&amp;&amp;Ȋ&gt;=7&amp;&amp;ȉ==0){ɉ(Ƕ,"direction",-Ƿ);ɉ(Ƕ,"directionChanged"
,1);Ȋ=0;}if((Ƕ.LowerLimitDeg!=float.MinValue||Ƕ.UpperLimitDeg!=float.MaxValue)&amp;&amp;Ȋ&gt;=3&amp;&amp;ȉ==0){double ȗ=ā(Ƕ);float Ș=(float)
Math.Round(Ƕ.LowerLimitDeg);float ș=(float)Math.Round(Ƕ.UpperLimitDeg);if(ȗ==Ș||ȗ==360+Ș||ȗ==ș||ȗ==360+ș){ɉ(Ƕ,"direction",-Ƿ
);ɉ(Ƕ,"directionChanged",1);Ȋ=0;}}Ǿ(Ƕ,Ƿ,(float)(2.75-ȕ.Ų(Ȉ)*2));if(ȕ&lt;ƴ&amp;&amp;Ȋ&gt;=7&amp;&amp;ȉ==1){ȁ(Ƕ,false);ɉ(Ƕ,"directionChanged",2);
}else{ɉ(Ƕ,"directionTimer",Ȋ+1);}}else{if(!Ȇ(Ƕ,Ȗ,false))Ȥ++;}}if(Ȥ!=0)return;foreach(var ȓ in ǭ){if(Ɉ(ȓ,"rotationDone")==
1)continue;double ȕ=Ɉ(ȓ,"output");double ƴ=Ɉ(ȓ,"outputLast");double Ȉ=Ɉ(ȓ,"outputMax");double Ȗ=Ɉ(ȓ,"outputMaxAngle");
double Ƿ=Ɉ(ȓ,"direction");double ȉ=Ɉ(ȓ,"directionChanged");double Ȋ=Ɉ(ȓ,"directionTimer");if(Ȉ==0)Ȉ=1;if(ȉ!=2){ȣ++;if(ȕ&lt;ƴ&amp;&amp;Ȋ&gt;=
7&amp;&amp;ȉ==0){ɉ(ȓ,"direction",-Ƿ);ɉ(ȓ,"directionChanged",1);Ȋ=0;}if((ȓ.LowerLimitDeg!=float.MinValue||ȓ.UpperLimitDeg!=float.
MaxValue)&amp;&amp;Ȋ&gt;=3&amp;&amp;ȉ==0){double ț=ā(ȓ);float ź=(float)Math.Round(ȓ.LowerLimitDeg);float ù=(float)Math.Round(ȓ.UpperLimitDeg);if(ț
==ź||ț==360+ź||ț==ù||ț==360+ù){ɉ(ȓ,"direction",-Ƿ);ɉ(ȓ,"directionChanged",1);Ȋ=0;}}Ǿ(ȓ,Ƿ,(float)(2.75-ȕ.Ų(Ȉ)*2));if(ȕ&lt;ƴ&amp;&amp;Ȋ
&gt;=7&amp;&amp;ȉ==1){ȁ(ȓ,false);ɉ(ȓ,"directionChanged",2);}else{ɉ(ȓ,"directionTimer",Ȋ+1);}}else{if(!Ȇ(ȓ,Ȗ,false))ȣ++;}}if(Ȥ==0&amp;&amp;ȣ==
0){ǚ=0;}}void Ó(IMyTerminalBlock ú,bool û=true,string ü="",double ý=0,double þ=0){string ÿ=ú.CustomName;string Ā=System.
Text.RegularExpressions.Regex.Match(ú.CustomName,@" *\(\d+\.*\d*%.*\)").Value;if(Ā!=String.Empty){ÿ=ú.CustomName.Replace(Ā,
"");}if(û){ÿ+=" ("+ý.Ĵ(þ);if(ü!=""){ÿ+=", "+ü;}ÿ+=")";}if(ÿ!=ú.CustomName){ú.CustomName=ÿ;}}double ā(IMyMotorStator Ă){
return Math.Round(Ă.Angle*180/Math.PI);}StringBuilder ă(IMyTextSurface Ã,bool Ą=true,bool ą=true,bool Ć=true,bool î=true,bool
ï=true,bool ð=true,bool ò=true,bool ö=true){bool ô=false;StringBuilder W=new StringBuilder();if(Ą){W.Append(
"Isy's Solar Alignment "+Ə[Ʀ]+"\n");W.Append(Ã.ű('=',Ã.ŧ(W))).Append("\n\n");}if(ą&amp;&amp;č!=null){W.Append("Warning!\n"+č+"\n\n");ô=true;}if(Ć){
string é=ƌ+"\n"+Ƥ;W.Append(é);W.Append('\n'.ņ(3-é.Count(ñ=&gt;ñ=='\n')));ô=true;}if(î){W.Append("Statistics for "+Ǖ.Count+
" Solar Panels:\n");W.Append(Ù(Ã,"Efficiency",Ǩ,Ǫ,ſ,ƀ));W.Append(Ù(Ã,"Output",ǫ,Ǩ,Ɓ,ſ)+"\n\n");ô=true;}if(ï&amp;&amp;ż.Count&gt;0){W.Append(
"Statistics for "+ż.Count+" Wind Turbines:\n");W.Append(Ù(Ã,"Output",Ž,ž,ƈ,Ɖ)+"\n\n");ô=true;}if(ð&amp;&amp;ƛ.Count&gt;0){W.Append("Statistics for "
+ƛ.Count+" Batteries:\n");W.Append(Ù(Ã,"Input",Ɯ,Ɲ,Ƃ,ƃ));W.Append(Ù(Ã,"Output",ƞ,Ɵ,ƅ,Ǝ));W.Append(Ù(Ã,"Charge",Ơ,ơ,Ɔ,Ƈ)+
"\n\n");ô=true;}if(ò&amp;&amp;(Ƣ.Count&gt;0||ƣ.Count&gt;0)){W.Append("Statistics for Oxygen:\n");if(Ƣ.Count&gt;0){W.Append(Ù(Ã,Ƣ.Count+" Farms"
,ƥ,100));}if(ƣ.Count&gt;0){W.Append(Ù(Ã,ƣ.Count+" Tanks",Ż,Ɛ,Ƌ,Ɗ));}W.Append("\n\n");ô=true;}if(ö&amp;&amp;!useGyroMode){string ê=""
;string ë="";string ì="";if(ƽ&lt;ƺ){ë=" inaccurate";ê="*";}else if(ƽ==Ƽ||ƿ==ƾ){ë=" inaccurate, still calculating";ê="*";}if(
ƺ&lt;ƿ&amp;&amp;ê==""){ì=" / Dusk in: "+v(ƿ-ƺ);}else if(ƺ&gt;ƿ&amp;&amp;ê==""){ì=" / Dawn in: "+v(ƽ-ƺ);}W.Append("Time of your location:\n");W.
Append("Time: "+Z(ƺ)+ì+ê+"\n");W.Append("Dawn: "+Z(ƽ)+" / Daylength: "+v(ƿ)+ê+"\n");W.Append("Dusk: "+Z(ƿ)+" / Nightlength: "+
v(ƽ-ƿ)+ê+"\n");if(ê!=""){W.Append(ê+ë);}ô=true;}if(!ô){W.Append("-- No informations to show --");}return W;}StringBuilder
í(IMyTextSurface Ã,bool î=false,bool ï=false,bool ð=false,bool ò=false,bool ö=false,bool ó=false){bool ô=false;
StringBuilder W=new StringBuilder();if(î){W.Append("Statistics for "+Ǖ.Count+" Solar Panels:\n");W.Append(Ù(Ã,"Efficiency",Ǩ,Ǫ,ſ,ƀ,à:
true));W.Append(Ù(Ã,"Output",ǫ,Ǩ,Ɓ,ſ,à:true));ô=true;}if(ï&amp;&amp;ż.Count&gt;0){if(ô)W.Append("\n");W.Append("Statistics for "+ż.
Count+" Wind Turbines:\n");W.Append(Ù(Ã,"Output",Ž,ž,ƈ,Ɖ,à:true));ô=true;}if(ð&amp;&amp;ƛ.Count&gt;0){if(ô)W.Append("\n");W.Append(
"Statistics for "+ƛ.Count+" Batteries:\n");W.Append(Ù(Ã,"Input",Ɯ,Ɲ,Ƃ,ƃ,à:true));W.Append(Ù(Ã,"Output",ƞ,Ɵ,ƅ,Ǝ,à:true));W.Append(Ù(Ã,
"Charge",Ơ,ơ,Ɔ,Ƈ,à:true));ô=true;}if(ò&amp;&amp;(Ƣ.Count&gt;0||ƣ.Count&gt;0)){if(ô)W.Append("\n");W.Append("Statistics for Oxygen:\n");if(Ƣ.
Count&gt;0){W.Append(Ù(Ã,Ƣ.Count+" Farms",ƥ,100,à:true));}if(ƣ.Count&gt;0){W.Append(Ù(Ã,ƣ.Count+" Tanks",Ż,Ɛ,Ƌ,Ɗ,à:true));}ô=true;}
if(ö){if(ô)W.Append("\n");if(useGyroMode){W.Append("Location time is not available in gyro mode!");}else{string j=Z(ƺ);W.
Append(Ã.ű(' ',(Ã.Ű()-Ã.ŧ(j))/2)).Append(j+"\n");}ô=true;}if(ó){if(ô)W.Append("\n");string j=DateTime.Now.ToString(@"HH:mm:ss"
);W.Append(Ã.ű(' ',(Ã.Ű()-Ã.ŧ(j))/2)).Append(j+"\n");ô=true;}if(!ô){W.Append(
"Edit the custom data and set,\nwhat should be shown here!");}return W;}void õ(string O=null){if(Ǳ.Count==0){Ʊ++;return;}for(int S=Ǒ;S&lt;Ǳ.Count;S++){if(Ő())return;Ǒ++;var ć=Ǳ[S].Ĕ(
mainLcdKeyword);foreach(var ø in ć){var Ĉ=ø.Key;var Õ=ø.Value;if(!Ĉ.GetText().EndsWith("\a")){Ĉ.Font=defaultFont;Ĉ.FontSize=
defaultFontSize;Ĉ.Alignment=VRage.Game.GUI.TextPanel.TextAlignment.LEFT;Ĉ.ContentType=VRage.Game.GUI.TextPanel.ContentType.
TEXT_AND_IMAGE;}bool Ą=Õ.ğ("showHeading");bool ą=Õ.ğ("showWarnings");bool Ć=Õ.ğ("showCurrentOperation");bool î=Õ.ğ("showSolarStats");
bool ï=Õ.ğ("showTurbineStats");bool ð=Õ.ğ("showBatteryStats");bool ò=Õ.ğ("showOxygenStats");bool ö=Õ.ğ("showLocationTime");
bool ĉ=Õ.ğ("scrollTextIfNeeded");StringBuilder W=new StringBuilder();if(O!=null){W.Append(O);}else{W=ă(Ĉ,Ą,ą,Ć,î,ï,ð,ò,ö);}W
=Ĉ.Ħ(W,Ą?3:0,ĉ);Ĉ.WriteText(W.Append("\a"));}}Ʊ++;Ǒ=0;}void ď(){if(ǲ.Count==0){Ʊ++;return;}for(int S=ǒ;S&lt;ǲ.Count;S++){if(
Ő())return;ǒ++;var ć=ǲ[S].Ĕ(compactLcdKeyword);foreach(var ø in ć){var Ĉ=ø.Key;var Õ=ø.Value;if(!Ĉ.GetText().EndsWith(
"\a")){Ĉ.Font=defaultFont;Ĉ.FontSize=defaultFontSize;Ĉ.Alignment=VRage.Game.GUI.TextPanel.TextAlignment.LEFT;Ĉ.ContentType=
VRage.Game.GUI.TextPanel.ContentType.TEXT_AND_IMAGE;}bool î=Õ.ğ("showSolarStats");bool ï=Õ.ğ("showTurbineStats");bool ð=Õ.ğ(
"showBatteryStats");bool ò=Õ.ğ("showOxygenStats");bool ö=Õ.ğ("showLocationTime");bool ó=Õ.ğ("showRealTime");bool ĉ=Õ.ğ(
"scrollTextIfNeeded");StringBuilder W=new StringBuilder();W=í(Ĉ,î,ï,ð,ò,ö,ó);W=Ĉ.Ħ(W,0,ĉ);Ĉ.WriteText(W.Append("\a"));}}Ʊ++;ǒ=0;}void Ċ(){if
(Ǵ.Count==0){Ʊ++;return;}StringBuilder ċ=new StringBuilder();if(ǋ.Count==0){ċ.Append("- No problems detected -");}else{
int Č=1;foreach(var č in ǋ){ċ.Append(Č+". "+č.Replace("\n"," ")+"\n");Č++;}}for(int S=Ǔ;S&lt;Ǵ.Count;S++){if(Ő())return;Ǔ++;
var ć=Ǵ[S].Ĕ(warningsLcdKeyword);foreach(var ø in ć){var Ĉ=ø.Key;var Õ=ø.Value;if(!Ĉ.GetText().EndsWith("\a")){Ĉ.Font=
defaultFont;Ĉ.FontSize=defaultFontSize;Ĉ.Alignment=VRage.Game.GUI.TextPanel.TextAlignment.LEFT;Ĉ.ContentType=VRage.Game.GUI.
TextPanel.ContentType.TEXT_AND_IMAGE;}bool Ą=Õ.ğ("showHeading");bool ĉ=Õ.ğ("scrollTextIfNeeded");StringBuilder W=new
StringBuilder();if(Ą){W.Append("Isy's Solar Alignment Warnings\n");W.Append(Ĉ.ű('=',Ĉ.ŧ(W))).Append("\n\n");}W.Append(ċ);W=Ĉ.Ħ(W,Ą?3:
0,ĉ);Ĉ.WriteText(W.Append("\a"));}}Ʊ++;Ǔ=0;}void Ď(){if(ǳ.Count==0){Ʊ++;return;}for(int S=ǔ;S&lt;ǳ.Count;S++){if(Ő())return;
ǔ++;var ć=ǳ[S].Ĕ(performanceLcdKeyword);foreach(var ø in ć){var Ĉ=ø.Key;var Õ=ø.Value;if(!Ĉ.GetText().EndsWith("\a")){Ĉ.
Font=defaultFont;Ĉ.FontSize=defaultFontSize;Ĉ.Alignment=VRage.Game.GUI.TextPanel.TextAlignment.LEFT;Ĉ.ContentType=VRage.Game
.GUI.TextPanel.ContentType.TEXT_AND_IMAGE;}bool Ą=Õ.ğ("showHeading");bool ĉ=Õ.ğ("scrollTextIfNeeded");StringBuilder W=new
StringBuilder();if(Ą){W.Append("Isy's Solar Alignment Performance\n");W.Append(Ĉ.ű('=',Ĉ.ŧ(W))).Append("\n\n");}W.Append(Î);W=Ĉ.Ħ(W,Ą
?3:0,ĉ);Ĉ.WriteText(W.Append("\a"));}}Ʊ++;ǔ=0;}void º(){if(ģ==99){ģ=0;}else{ģ++;}Echo("Isy's Solar Alignment "+Ə[Ʀ]+
"\n========================\n");if(č!=null){Echo("Warning!\n"+č+"\n");}StringBuilder W=new StringBuilder();W.Append("Script is running in "+(
useGyroMode?"gyro":"rotor")+" mode\n\n");W.Append("Task: "+Ʋ[Ʈ]+"\n");W.Append("Script step: "+Ʈ+" / "+(Ʋ.Length-1)+"\n\n");Î=W.
Append(Î);W.Append("Main Grid: "+š.CustomName+"\n");if(ť.Count&gt;0)W.Append("Connected Grids: "+ť.Count+"\n");if(Ǭ.Count&gt;0)W.
Append("Rotors: "+Ǭ.Count+"\n");if(ǯ.Count&gt;0)W.Append("Gyros: "+ǯ.Count+"\n");if(Ǖ.Count&gt;0)W.Append("Solar Panels: "+Ǖ.Count+
"\n");if(ż.Count&gt;0)W.Append("Wind Turbines: "+ż.Count+"\n");if(Ƣ.Count&gt;0)W.Append("Oxygen Farms: "+Ƣ.Count+"\n");if(ƣ.Count&gt;
0)W.Append("Oxygen Tanks: "+ƣ.Count+"\n");if(ƛ.Count&gt;0)W.Append("Batteries: "+ƛ.Count+"\n");if(ǅ&gt;0)W.Append("Reactors: "+
ǅ+"\n");if(ǆ&gt;0)W.Append("Hydrogen Engines: "+ǆ+"\n");if(Ǳ.Count&gt;0)W.Append("LCDs: "+Ǳ.Count+"\n");if(ǰ.Count&gt;0)W.Append(
"Corner LCDs: "+ǰ.Count+"\n");if(ǥ.Count&gt;0)W.Append("Lights: "+ǥ.Count+"\n");if(ǣ.Count&gt;0)W.Append("Spotlights: "+ǣ.Count+"\n");if(
timers.Length&gt;0)W.Append("Timer Blocks: "+timers.Length+"\n");Echo(Î.ToString());if(Ǳ.Count==0){Echo(
"Hint:\nBuild a LCD and add the main LCD\nkeyword '"+mainLcdKeyword+"' to its name to get\nmore informations about your base\nand the current script actions.\n");}}void X()
{ƺ+=1;ƻ+=1;if(ƺ&gt;172800){ƺ=0;ƻ=0;}double Y=Ǫ*nightTimePercentage;if(Ǩ&lt;Y&amp;&amp;ǩ&gt;=Y&amp;&amp;ƻ&gt;300){ƿ=ƺ;ƻ=0;}if(Ǩ&gt;Y&amp;&amp;ǩ&lt;=Y&amp;&amp;ƻ&gt;300){if(ƿ!=
ƾ){ƽ=ƺ;}ƺ=0;ƻ=0;}if(ƿ&gt;ƽ){ƽ=ƿ*2;}}string Z(double a,bool d=false){string e="";a=a%ƽ;double f=ƿ+(ƽ-ƿ)/2D;double h=ƽ/24D;
double j;if(a&lt;f){j=(a+(ƽ-f))/h;}else{j=(a-f)/h;}double k=Math.Floor(j);double m=Math.Floor((j%1*100)*0.6);string q=k.ToString(
"00");string u=m.ToString("00");e=q+":"+u;if(d){return k.ToString();}else{return e;}}string v(int K){string w="";TimeSpan x=
TimeSpan.FromSeconds(K);w=x.ToString(@"hh\:mm\:ss");return w;}void y(){if(ǐ.Count==0)return;double ª=turnOnAtPercent%100/100;
double U=turnOffAtPercent%100/100;double A=overloadPercentage%100/100;if(ǈ=="lowBat"||ǈ==""){if(activateOnLowBattery&amp;&amp;Ơ&lt;ơ*ª){ǂ
=true;ǈ="lowBat";}else if(activateOnLowBattery&amp;&amp;Ơ&gt;ơ*U){ǂ=false;ǈ="";}}if(ǈ=="overload"||ǈ==""){if(activateOnOverload&amp;&amp;ƞ+ǫ
+Ž&gt;(Ɵ+Ǩ+ž)*A){ǂ=true;ǈ="overload";}else{ǂ=false;ǈ="";}}if(Ơ&lt;Ǉ||(ǂ&amp;&amp;ǃ&amp;&amp;Ǆ)){ǃ=true;Ǆ=true;}else{if(
activateHydrogenEngineFirst&amp;&amp;ǆ&gt;0){Ǆ=true;ǃ=false;}else if(!activateHydrogenEngineFirst&amp;&amp;ǅ&gt;0){Ǆ=false;ǃ=true;}else{Ǆ=true;ǃ=true;}}Ǉ=Ơ;foreach(var J
in ǐ){if(ǂ){if(ǃ&amp;&amp;J.BlockDefinition.TypeIdString.Contains("Reactor")){J.Enabled=true;}else if(Ǆ&amp;&amp;J.BlockDefinition.
TypeIdString.Contains("HydrogenEngine")){J.Enabled=true;}else{J.Enabled=false;}}else{J.Enabled=false;}}if(ǈ=="lowBat")ƍ=
"Power fallback active: Low battery charge!";if(ǈ=="overload")ƍ="Power fallback active: Overload!";}void B(){if(ǥ.Count==0&amp;&amp;ǣ.Count==0)return;int C=0;int.TryParse(Z
(ƺ,true),out C);bool D=true;if(!simpleMode){if(ƺ!=ƽ&amp;&amp;C&gt;=lightOffHour&amp;&amp;C&lt;lightOnHour){D=false;}else if(ƺ==ƽ&amp;&amp;Ǩ&gt;Ǫ*
nightTimePercentage){D=false;}}else{if(Ǩ&gt;Ǫ*(simpleThreshold%100)/100)D=false;}foreach(var E in ǥ){E.Enabled=D;}foreach(var F in ǣ){F.
Enabled=D;}}void G(){if(events.Length==0){N("No events for triggering specified!");}else if(timers.Length==0){N(
"No timers for triggering specified!");}else if(events.Length!=timers.Length){N("Every event needs a timer block name!\nFound "+events.Length+" events and "+
timers.Length+" timers.");}else{int H=-1;string I="";int K;for(int S=0;S&lt;=events.Length-1;S++){if(events[S]=="sunrise"&amp;&amp;ƺ==0){
H=S;I="sunrise";}else if(events[S]=="sunset"&amp;&amp;ƺ==ƿ){H=S;I="sunset";}else if(int.TryParse(events[S],out K)==true&amp;&amp;ƺ%K==0){
H=S;I=K+" seconds";}else if(Z(ƺ)==events[S]){H=S;I=events[S];}}foreach(var L in timers){var M=GridTerminalSystem.
GetBlockWithName(L)as IMyTimerBlock;if(M==null){N("External timer block not found:\n'"+M.CustomName+"'");}else{if(M.GetOwnerFactionTag()
!=Me.GetOwnerFactionTag()){N("'"+M.CustomName+
"' has a different owner / faction!\nAll blocks should have the same owner / faction!");}if(M.Enabled==false){N("'"+M.CustomName+"' is turned off!\nTurn it on in order to be used by the script!");}}}if(H&gt;=0
){var M=GridTerminalSystem.GetBlockWithName(timers[H])as IMyTimerBlock;if(M!=null){M.ApplyAction("Start");ƌ=
"External timer triggered! Reason: "+I;}}}}void N(string O){ǋ.Add(O);Ǎ.Add(O);č=ǋ.ElementAt(0);}void P(){foreach(var Q in Ǖ){Q.CustomData="";Ó(Q,false);}
foreach(var R in ƛ){Ó(R,false);}foreach(var z in Ƣ){Ó(z,false);}foreach(var T in ƣ){Ó(T,false);}}void µ(){if(Storage.Length&gt;0){
var Õ=Storage.Split('\n');foreach(var Ö in Õ){var Ø=Ö.Split('=');if(Ø.Length!=2)continue;if(Ø[0]=="dayTimer"){int.TryParse(
Ø[1],out ƺ);}else if(Ø[0]=="dayLength"){int.TryParse(Ø[1],out ƽ);}else if(Ø[0]=="sunSet"){int.TryParse(Ø[1],out ƿ);}else
if(Ø[0]=="outputLast"){float.TryParse(Ø[1],out ǩ);}else if(Ø[0]=="maxDetectedOutput"){float.TryParse(Ø[1],out Ǫ);}else if(
Ø[0]=="solarPanelsCount"){int.TryParse(Ø[1],out ǖ);}else if(Ø[0]=="oxygenFarmsCount"){int.TryParse(Ø[1],out Ƅ);}else if(Ø
[0]=="action"){ǌ=Ø[1];}}if(ǌ=="paused")Ƹ=true;}}void Save(){string Õ="";Õ+="dayTimer="+ƺ+"\n";Õ+="dayLength="+ƽ+"\n";Õ+=
"sunSet="+ƿ+"\n";Õ+="outputLast="+ǩ+"\n";Õ+="maxDetectedOutput="+Ǫ+"\n";Õ+="solarPanelsCount="+Ǖ.Count+"\n";Õ+=
"oxygenFarmsCount="+Ƣ.Count+"\n";Õ+="action="+ǌ;Storage=Õ;}StringBuilder Ù(IMyTextSurface Ã,string Ú,double Û,double Ü,string Ý=null,string
Þ=null,bool ß=false,bool à=false){string á=Û.ToString();string â=Ü.ToString();if(Ý!=null){á=Ý;}if(Þ!=null){â=Þ;}float ã=Ã
.FontSize;float ä=Ã.Ű();char å=' ';float æ=Ã.ũ(å);StringBuilder è=new StringBuilder(" "+Û.Ĵ(Ü));è=Ã.ű(å,Ã.ŧ("99999.9%")-Ã
.ŧ(è)).Append(è);StringBuilder ç=new StringBuilder(á+" / "+â);StringBuilder Ô=new StringBuilder();StringBuilder Ò=new
StringBuilder();StringBuilder À;if(Ü==0){Ô.Append(Ú+" ");À=Ã.ű(å,ä-Ã.ŧ(Ô)-Ã.ŧ(á));Ô.Append(À).Append(á);return Ô.Append("\n");}double
Á=0;if(Ü&gt;0)Á=Û/Ü&gt;=1?1:Û/Ü;if(à&amp;&amp;!ß){if(ã&lt;=0.5||(ã&lt;=1&amp;&amp;ä&gt;512)){Ô.Append(Â(Ã,ä*0.25f,Á)+" "+Ú);À=Ã.ű(å,ä*0.75-Ã.ŧ(Ô)-Ã.ŧ(á+
" /"));Ô.Append(À).Append(ç);À=Ã.ű(å,ä-Ã.ŧ(Ô)-Ã.ŧ(è));Ô.Append(À);Ô.Append(è);}else{Ô.Append(Â(Ã,ä*0.3f,Á)+" "+Ú);À=Ã.ű(å,ä-
Ã.ŧ(Ô)-Ã.ŧ(è));Ô.Append(À);Ô.Append(è);}}else{Ô.Append(Ú+" ");if(ã&lt;=0.6||(ã&lt;=1&amp;&amp;ä&gt;512)){À=Ã.ű(å,ä*0.5-Ã.ŧ(Ô)-Ã.ŧ(á+" /"))
;Ô.Append(À).Append(ç);À=Ã.ű(å,ä-Ã.ŧ(Ô)-Ã.ŧ(è));Ô.Append(À).Append(è);if(!ß){Ò=Â(Ã,ä,Á).Append("\n");}}else{À=Ã.ű(å,ä-Ã.ŧ
(Ô)-Ã.ŧ(ç));Ô.Append(À).Append(ç);if(!ß){Ò=Â(Ã,ä-Ã.ŧ(è),Á);Ò.Append(è).Append("\n");}}}return Ô.Append("\n").Append(Ò);}
StringBuilder Â(IMyTextSurface Ã,float Ä,double Á){StringBuilder Å,Æ;char Ç='[';char È=']';char É='I';char Ê='.';float Ë=Ã.ũ(Ç);float
Ì=Ã.ũ(È);float Í=Ä-Ë-Ì;Å=Ã.ű(É,Í*Á);Æ=Ã.ű(Ê,Í-Ã.ŧ(Å));return new StringBuilder().Append(Ç).Append(Å).Append(Æ).Append(È);
}StringBuilder Î=new StringBuilder("No performance Information available!");Dictionary&lt;string,int&gt;Ï=new Dictionary&lt;string
,int&gt;();List&lt;int&gt;Ð=new List&lt;int&gt;(new int[100]);List&lt;double&gt;Ñ=new List&lt;double&gt;(new double[100]);double V,Đ;int ģ=0;
DateTime Ś;void ś(string Ŝ,bool ĝ=false){if(ĝ){Ś=DateTime.Now;return;}ģ=ģ&gt;=99?0:ģ+1;int ŝ=Runtime.CurrentInstructionCount;if(ŝ&gt;V
)V=ŝ;Ð[ģ]=ŝ;double Ş=Ð.Sum()/Ð.Count;Î.Clear();Î.Append("Instructions: "+ŝ+" / "+Runtime.MaxInstructionCount+"\n");Î.
Append("Max. Instructions: "+V+" / "+Runtime.MaxInstructionCount+"\n");Î.Append("Avg. Instructions: "+Math.Floor(Ş)+" / "+
Runtime.MaxInstructionCount+"\n\n");double ş=(DateTime.Now-Ś).TotalMilliseconds;if(ş&gt;Đ&amp;&amp;Ï.ContainsKey(Ŝ))Đ=ş;Ñ[ģ]=ş;double Š=Ñ.
Sum()/Ñ.Count;Î.Append("Last runtime: "+Math.Round(ş,4)+" ms\n");Î.Append("Max. runtime: "+Math.Round(Đ,4)+" ms\n");Î.
Append("Avg. runtime: "+Math.Round(Š,4)+" ms\n\n");Î.Append("Instructions per Method:\n");Ï[Ŝ]=ŝ;foreach(var L in Ï.
OrderByDescending(S=&gt;S.Value)){Î.Append("- "+L.Key+": "+L.Value+"\n");}Î.Append("\n");}IMyCubeGrid š=null;HashSet&lt;IMyCubeGrid&gt;Ţ=new
HashSet&lt;IMyCubeGrid&gt;();void ţ(IMyCubeGrid Ŋ){Ţ.Add(Ŋ);List&lt;IMyMotorStator&gt;ŋ=new List&lt;IMyMotorStator&gt;();List&lt;IMyPistonBase&gt;Ō=new
List&lt;IMyPistonBase&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt;(ŋ,ō=&gt;ō.IsAttached&amp;&amp;ō.TopGrid==Ŋ&amp;&amp;!Ţ.Contains(ō.
CubeGrid));GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt;(Ō,Ŏ=&gt;Ŏ.IsAttached&amp;&amp;Ŏ.TopGrid==Ŋ&amp;&amp;!Ţ.Contains(Ŏ.CubeGrid));if(ŋ.
Count==0&amp;&amp;Ō.Count==0){š=Ŋ;return;}else{foreach(var Ă in ŋ){ţ(Ă.CubeGrid);}foreach(var ŏ in Ō){ţ(ŏ.CubeGrid);}}}HashSet&lt;
IMyCubeGrid&gt;ť=new HashSet&lt;IMyCubeGrid&gt;();void ř(IMyCubeGrid Ŋ,bool ő=false){if(ő)ť.Clear();ť.Add(Ŋ);List&lt;IMyMotorStator&gt;ŋ=new List&lt;
IMyMotorStator&gt;();List&lt;IMyPistonBase&gt;Ō=new List&lt;IMyPistonBase&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt;(ŋ,ō=&gt;ō.CubeGrid==Ŋ
&amp;&amp;ō.IsAttached&amp;&amp;!ť.Contains(ō.TopGrid));GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt;(Ō,Ŏ=&gt;Ŏ.CubeGrid==Ŋ&amp;&amp;Ŏ.IsAttached
&amp;&amp;!ť.Contains(Ŏ.TopGrid));foreach(var Ă in ŋ){ř(Ă.TopGrid);}foreach(var ŏ in Ō){ř(ŏ.TopGrid);}}bool Ő(double Û=10){return
Runtime.CurrentInstructionCount&gt;Û*1000;}List&lt;IMyTerminalBlock&gt;Œ(string ĕ,string[]œ=null){string Ŕ="[IsyLCD]";var ŕ=new List&lt;
IMyTerminalBlock&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyTextSurfaceProvider&gt;(ŕ,Ŗ=&gt;Ŗ.IsSameConstructAs(Me)&amp;&amp;(Ŗ.CustomName.Contains(ĕ)||
(Ŗ.CustomName.Contains(Ŕ)&amp;&amp;Ŗ.CustomData.Contains(ĕ))));var ŗ=ŕ.FindAll(Ŗ=&gt;Ŗ.CustomName.Contains(ĕ));foreach(var Ã in ŗ){Ã
.CustomName=Ã.CustomName.Replace(ĕ,"").Replace(" "+ĕ,"").TrimEnd(' ');bool Ř=false;if(Ã is IMyTextSurface){if(!Ã.
CustomName.Contains(Ŕ))Ř=true;if(!Ã.CustomData.Contains(ĕ))Ã.CustomData="@0 "+ĕ+(œ!=null?"\n"+String.Join("\n",œ):"");}else if(Ã
is IMyTextSurfaceProvider){if(!Ã.CustomName.Contains(Ŕ))Ř=true;int Ť=(Ã as IMyTextSurfaceProvider).SurfaceCount;for(int S=
0;S&lt;Ť;S++){if(!Ã.CustomData.Contains("@"+S)){Ã.CustomData+=(Ã.CustomData==""?"":"\n\n")+"@"+S+" "+ĕ+(œ!=null?"\n"+String.
Join("\n",œ):"");break;}}}else{ŕ.Remove(Ã);}if(Ř)Ã.CustomName+=" "+Ŕ;}return ŕ;}
}public static partial class ĸ{public static float Ų(this float ĵ,float Ķ){return Ķ==0?1:ĵ/Ķ;}public static double Ų(this
double ĵ,double Ķ){return Ķ==0?1:ĵ/Ķ;}}public static partial class ĸ{private static Dictionary&lt;char,float&gt;ų=new Dictionary&lt;
char,float&gt;();public static void Ŵ(string ŵ,float Ŷ){foreach(char ŷ in ŵ){ų[ŷ]=Ŷ;}}public static void Ÿ(){if(ų.Count&gt;0)
return;Ŵ("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ",18);Ŵ(
"ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□",22);Ŵ("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€",20);Ŵ("￥$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡",21);Ŵ(
"！ !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙",9);Ŵ("？7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ",17);Ŵ("（）：《》，。、；【】(),.1:;[]ft{}·ţťŧț",10);Ŵ("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−",19);
Ŵ("L_vx«»ĹĻĽĿŁГгзлхчҐ–•",16);Ŵ("\"-rª­ºŀŕŗř",11);Ŵ("WÆŒŴ—…‰",32);Ŵ("'|¦ˉ‘’‚",7);Ŵ("@©®мшњ",26);Ŵ("mw¼ŵЮщ",28);Ŵ("/ĳтэє",
15);Ŵ("\\°“”„",13);Ŵ("*²³¹",12);Ŵ("¾æœЉ",29);Ŵ("%ĲЫ",25);Ŵ("MМШ",27);Ŵ("½Щ",30);Ŵ("ю",24);Ŵ("ј",8);Ŵ("љ",23);Ŵ("ґ",14);Ŵ(
"™",31);}public static Vector2 Ź(this IMyTextSurface Ĉ,StringBuilder O){Ÿ();Vector2 Ä=new Vector2();if(Ĉ.Font=="Monospace")
{float ã=Ĉ.FontSize;Ä.X=(float)(O.Length*19.4*ã);Ä.Y=(float)(28.8*ã);return Ä;}else{float ã=(float)(Ĉ.FontSize*0.779);
foreach(char ŷ in O.ToString()){try{Ä.X+=ų[ŷ]*ã;}catch{}}Ä.Y=(float)(28.8*Ĉ.FontSize);return Ä;}}public static float ŧ(this
IMyTextSurface Ã,StringBuilder O){Vector2 Ũ=Ã.Ź(O);return Ũ.X;}public static float ŧ(this IMyTextSurface Ã,string O){Vector2 Ũ=Ã.Ź(new
StringBuilder(O));return Ũ.X;}public static float ũ(this IMyTextSurface Ã,char Ū){float ū=ŧ(Ã,new string(Ū,1));return ū;}public
static int Ŭ(this IMyTextSurface Ã){Vector2 ŭ=Ã.SurfaceSize;float Ů=Ã.TextureSize.Y;ŭ.Y*=512/Ů;float ů=ŭ.Y*(100-Ã.TextPadding*
2)/100;Vector2 Ũ=Ã.Ź(new StringBuilder("T"));return(int)(ů/Ũ.Y);}public static float Ű(this IMyTextSurface Ã){Vector2 ŭ=Ã
.SurfaceSize;float Ů=Ã.TextureSize.Y;ŭ.X*=512/Ů;return ŭ.X*(100-Ã.TextPadding*2)/100;}public static StringBuilder ű(this
IMyTextSurface Ã,char Ŧ,double ŉ){int ĳ=(int)(ŉ/ũ(Ã,Ŧ));if(ĳ&lt;0)ĳ=0;return new StringBuilder().Append(Ŧ,ĳ);}private static DateTime Ĥ=
DateTime.Now;private static Dictionary&lt;int,List&lt;int&gt;&gt;ĥ=new Dictionary&lt;int,List&lt;int&gt;&gt;();public static StringBuilder Ħ(this
IMyTextSurface Ã,StringBuilder O,int ħ=3,bool ĉ=true,int Ĩ=0){int ĩ=Ã.GetHashCode();if(!ĥ.ContainsKey(ĩ)){ĥ[ĩ]=new List&lt;int&gt;{1,3,ħ,0};
}int Ī=ĥ[ĩ][0];int ī=ĥ[ĩ][1];int Ĭ=ĥ[ĩ][2];int ĭ=ĥ[ĩ][3];var Į=O.ToString().TrimEnd('\n').Split('\n');List&lt;string&gt;į=new
List&lt;string&gt;();if(Ĩ==0)Ĩ=Ã.Ŭ();float ä=Ã.Ű();StringBuilder İ,ı=new StringBuilder();for(int S=0;S&lt;Į.Length;S++){if(S&lt;ħ||S&lt;Ĭ||
į.Count-Ĭ&gt;Ĩ||Ã.ŧ(Į[S])&lt;=ä){į.Add(Į[S]);}else{try{ı.Clear();float Ĳ,Ģ;var đ=Į[S].Split(' ');string ė=System.Text.
RegularExpressions.Regex.Match(Į[S],@"\d+(\.|\:)\ ").Value;İ=Ã.ű(' ',Ã.ŧ(ė));foreach(var Ē in đ){Ĳ=Ã.ŧ(ı);Ģ=Ã.ŧ(Ē);if(Ĳ+Ģ&gt;ä){į.Add(ı.
ToString());ı=new StringBuilder(İ+Ē+" ");}else{ı.Append(Ē+" ");}}į.Add(ı.ToString());}catch{į.Add(Į[S]);}}}if(ĉ){if(į.Count&gt;Ĩ){
if(DateTime.Now.Second!=ĭ){ĭ=DateTime.Now.Second;if(ī&gt;0)ī--;if(ī&lt;=0)Ĭ+=Ī;if(Ĭ+Ĩ-ħ&gt;=į.Count&amp;&amp;ī&lt;=0){Ī=-1;ī=3;}if(Ĭ&lt;=ħ&amp;&amp;ī&lt;=0)
{Ī=1;ī=3;}}}else{Ĭ=ħ;Ī=1;ī=3;}ĥ[ĩ][0]=Ī;ĥ[ĩ][1]=ī;ĥ[ĩ][2]=Ĭ;ĥ[ĩ][3]=ĭ;}else{Ĭ=ħ;}StringBuilder ē=new StringBuilder();for(
var Ö=0;Ö&lt;ħ;Ö++){ē.Append(į[Ö]+"\n");}for(var Ö=Ĭ;Ö&lt;į.Count;Ö++){ē.Append(į[Ö]+"\n");}return ē;}public static Dictionary&lt;
IMyTextSurface,string&gt;Ĕ(this IMyTerminalBlock ú,string ĕ,Dictionary&lt;string,string&gt;Ė=null){var Ę=new Dictionary&lt;IMyTextSurface,string&gt;(
);if(ú is IMyTextSurface){Ę[ú as IMyTextSurface]=ú.CustomData;}else if(ú is IMyTextSurfaceProvider){var Ġ=System.Text.
RegularExpressions.Regex.Matches(ú.CustomData,@"@(\d) *("+ĕ+@")");int ę=(ú as IMyTextSurfaceProvider).SurfaceCount;foreach(System.Text.
RegularExpressions.Match Ě in Ġ){int ě=-1;if(int.TryParse(Ě.Groups[1].Value,out ě)){if(ě&gt;=ę)continue;string Ĝ=ú.CustomData;int ĝ=Ĝ.IndexOf
("@"+ě);int Ğ=Ĝ.IndexOf("@",ĝ+1)-ĝ;string Õ=Ğ&lt;=0?Ĝ.Substring(ĝ):Ĝ.Substring(ĝ,Ğ);Ę[(ú as IMyTextSurfaceProvider).
GetSurface(ě)]=Õ;}}}return Ę;}public static bool ğ(this string Õ,string ġ){var Ĝ=Õ.Replace(" ","").Split('\n');foreach(var Ö in Ĝ)
{if(Ö.StartsWith(ġ+"=")){try{return Convert.ToBoolean(Ö.Replace(ġ+"=",""));}catch{return true;}}}return true;}public
static string Ŀ(this string Õ,string ġ){var Ĝ=Õ.Replace(" ","").Split('\n');foreach(var Ö in Ĝ){if(Ö.StartsWith(ġ+"=")){return
Ö.Replace(ġ+"=","");}}return"";}}public static partial class ĸ{public static bool ŀ(this double Û,double Ł,double â,bool
ł=false,bool Ń=false){bool ń=Û&gt;=Ł;bool Ņ=Û&lt;=â;if(Ń)ń=Û&gt;Ł;if(ł)Ņ=Û&lt;â;return ń&amp;&amp;Ņ;}}public static partial class ĸ{public
static string ņ(this char Ň,int ň){if(ň&lt;=0){return"";}return new string(Ň,ň);}}public static partial class ĸ{public static
string Ĵ(this double ĵ,double Ķ){double ķ=Math.Round(ĵ/Ķ*100,1);if(Ķ==0){return"0%";}else{return ķ+"%";}}public static string
Ĵ(this float ĵ,float Ķ){double ķ=Math.Round(ĵ/Ķ*100,1);if(Ķ==0){return"0%";}else{return ķ+"%";}}}public static partial
class ĸ{public static string Ĺ(this float Û,bool ĺ=false){string Ļ="MW";string ļ=Û&lt;0?"-":"";Û=Math.Abs(Û);if(Û&lt;1){Û*=1000;Ļ=
"kW";}else if(Û&gt;=1000&amp;&amp;Û&lt;1000000){Û/=1000;Ļ="GW";}else if(Û&gt;=1000000&amp;&amp;Û&lt;1000000000){Û/=1000000;Ļ="TW";}else if(Û&gt;=1000000000
){Û/=1000000000;Ļ="PW";}if(ĺ)Ļ+="h";return ļ+Math.Round(Û,1)+" "+Ļ;}public static string Ĺ(this double Û,bool ĺ=false){
float Ľ=(float)Û;return Ľ.Ĺ(ĺ);}}public static partial class ĸ{public static string ľ(this float Û){string Ļ="L";if(Û&gt;=1000&amp;&amp;
Û&lt;1000000){Û/=1000;Ļ="KL";}else if(Û&gt;=1000000&amp;&amp;Û&lt;1000000000){Û/=1000000;Ļ="ML";}else if(Û&gt;=1000000000&amp;&amp;Û&lt;1000000000000){Û
/=1000000000;Ļ="BL";}else if(Û&gt;=1000000000000){Û/=1000000000000;Ļ="TL";}return Math.Round(Û,1)+" "+Ļ;}public static string
ľ(this double Û){float Ľ=(float)Û;return Ľ.ľ();}</Program>
              <Storage>dayTimer=41
dayLength=7200
sunSet=3600
outputLast=0.3805064
maxDetectedOutput=0.389471
solarPanelsCount=8
oxygenFarmsCount=0
action=align</Storage>
              <TextPanels>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
              </TextPanels>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>LargeStator</SubtypeName>
              <EntityId>126785272431232507</EntityId>
              <Min x="-10" y="1" z="0" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>output=0.389471009373665
outputLast=0.379226133227348
outputLocked=0
outputMax=0.389471009373665
outputMaxAngle=346
outputMaxDayBefore=0
outputBestPanel=0.0486781261861324
direction=-1
directionChanged=1
directionTimer=19
allowRotation=1
rotationDone=1
timeSinceRotation=10
firstLockOfDay=0
sunriseAngle=0</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Rotor</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>109917886479922222</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>-0.00166666671</TargetVelocity>
              <MinAngle xsi:nil="true" />
              <MaxAngle xsi:nil="true" />
              <CurrentAngle>6.03991365</CurrentAngle>
              <LimitsActive>false</LimitsActive>
              <RotorLock>false</RotorLock>
              <Torque>3.36E+07</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <IsStatic>true</IsStatic>
          <ConveyorLines>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="0" z="0" />
              <StartDirection>Up</StartDirection>
              <EndPosition x="-1" y="1" z="0" />
              <EndDirection>Down</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="1" z="0" />
              <StartDirection>Up</StartDirection>
              <EndPosition x="-1" y="2" z="0" />
              <EndDirection>Down</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="2" z="0" />
              <StartDirection>Up</StartDirection>
              <EndPosition x="-1" y="3" z="0" />
              <EndDirection>Down</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="3" z="0" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="-1" y="3" z="1" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="3" z="0" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="-2" y="3" z="0" />
              <EndDirection>Right</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="3" z="0" />
              <StartDirection>Up</StartDirection>
              <EndPosition x="-1" y="4" z="0" />
              <EndDirection>Down</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="3" z="0" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="-1" y="3" z="-1" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
          </ConveyorLines>
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>Solar Rotors</Name>
              <Blocks>
                <Vector3I>
                  <X>-9</X>
                  <Y>1</Y>
                  <Z>0</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <DisplayName>Terran Space Outpost</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>4</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>122347028440164923</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="-60948.868580267212" y="-49839.476994827652" z="-70221.642458499089" />
            <Forward x="0.4182123" y="0.289183974" z="-0.8610871" />
            <Up x="0.832862139" y="0.256279975" z="0.4905721" />
            <Orientation>
              <X>0.2475772</X>
              <Y>-0.09034357</Y>
              <Z>-0.5572841</Z>
              <W>0.787386835</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Large</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>LargeRotor</SubtypeName>
              <EntityId>109917886479922222</EntityId>
              <BuiltBy>144115188075855897</BuiltBy>
              <ParentEntityId>126785272431232507</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="0" y="1" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>LargeStator</SubtypeName>
              <EntityId>81942945850542482</EntityId>
              <Min x="0" y="1" z="-2" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>output=0.194633930921555
outputLast=0.189503237605095
outputLocked=0
outputMax=0.194633930921555
outputMaxAngle=360
outputMaxDayBefore=0
outputBestPanel=0.0486781261861324
direction=1
directionChanged=0
directionTimer=0
allowRotation=1
rotationDone=1
timeSinceRotation=31
firstLockOfDay=0
sunriseAngle=0</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Rotor</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>89517656848507081</TopBlockId>
              <ShareInertiaTensor>true</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>0</TargetVelocity>
              <MinAngle xsi:nil="true" />
              <MaxAngle xsi:nil="true" />
              <CurrentAngle>6.283131</CurrentAngle>
              <LimitsActive>false</LimitsActive>
              <RotorLock>false</RotorLock>
              <Torque>3.36E+07</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>LargeStator</SubtypeName>
              <EntityId>120436880227808775</EntityId>
              <Min x="0" y="1" z="1" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>output=0.19483707845211
outputLast=0.189722895622253
outputLocked=0
outputMax=0.19483707845211
outputMaxAngle=0
outputMaxDayBefore=0
outputBestPanel=0.0487283319234848
direction=1
directionChanged=0
directionTimer=0
allowRotation=1
rotationDone=1
timeSinceRotation=31
firstLockOfDay=0
sunriseAngle=0</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Rotor 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>119269462665270276</TopBlockId>
              <ShareInertiaTensor>true</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>0</TargetVelocity>
              <MinAngle xsi:nil="true" />
              <MaxAngle xsi:nil="true" />
              <CurrentAngle>2.80377462E-05</CurrentAngle>
              <LimitsActive>false</LimitsActive>
              <RotorLock>false</RotorLock>
              <Torque>3.36E+07</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.09313403" y="-0.06667453" z="0.0301892255" />
          <AngularVelocity x="0.00491437549" y="0.00213704724" z="0.00329413754" />
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>Solar Rotors</Name>
              <Blocks>
                <Vector3I>
                  <X>0</X>
                  <Y>1</Y>
                  <Z>-1</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>1</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <DisplayName>Large Grid 4923</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>77374227174085755</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="-60945.565357610962" y="-49837.991643265152" z="-70222.931154788152" />
            <Forward x="-0.362499535" y="0.9223441" z="0.13369745" />
            <Up x="0.41820693" y="0.289182425" z="-0.8610902" />
            <Orientation>
              <X>0.0539227761</X>
              <Y>0.7509601</Y>
              <Z>-0.5937182</Z>
              <W>0.283989459</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Large</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>LargeRotor</SubtypeName>
              <EntityId>89517656848507081</EntityId>
              <BuiltBy>144115188075855897</BuiltBy>
              <ParentEntityId>81942945850542482</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="0" y="1" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="0" y="2" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorSlope</SubtypeName>
              <Min x="0" y="4" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SolarPanel">
              <SubtypeName>LargeBlockSolarPanel</SubtypeName>
              <EntityId>126970565642644017</EntityId>
              <Min x="-4" y="1" z="0" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>0.0486397631466389</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Solar Panel 2 (100%)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SolarPanel">
              <SubtypeName>LargeBlockSolarPanel</SubtypeName>
              <EntityId>111928424575174738</EntityId>
              <Min x="-4" y="3" z="0" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>0.0486519671976566</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Solar Panel 3 (100%)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SolarPanel">
              <SubtypeName>LargeBlockSolarPanel</SubtypeName>
              <EntityId>130554954438365569</EntityId>
              <Min x="1" y="1" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>0.0486640781164169</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Solar Panel 4 (100%)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SolarPanel">
              <SubtypeName>LargeBlockSolarPanel</SubtypeName>
              <EntityId>90538754593390263</EntityId>
              <Min x="1" y="3" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>0.0486781261861324</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Solar Panel 5 (100%)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.0112445652" y="0.05112642" z="-0.017608583" />
          <AngularVelocity x="0.00350761646" y="0.00403172337" z="0.003511039" />
          <DisplayName>Large Grid 5755</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>74037237200418946</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="-60948.008228704712" y="-49839.680852249527" z="-70217.901125491277" />
            <Forward x="-0.832872152" y="-0.25625357" z="-0.490569264" />
            <Up x="-0.418213218" y="-0.28918463" z="0.8610866" />
            <Orientation>
              <X>0.330186963</X>
              <Y>0.3816961</Y>
              <Z>0.7318257</Z>
              <W>0.457947344</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Large</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>LargeRotor</SubtypeName>
              <EntityId>119269462665270276</EntityId>
              <BuiltBy>144115188075855897</BuiltBy>
              <ParentEntityId>120436880227808775</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="0" y="1" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="0" y="2" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SolarPanel">
              <SubtypeName>LargeBlockSolarPanel</SubtypeName>
              <EntityId>115665651112748820</EntityId>
              <Min x="0" y="1" z="1" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>0.048690777271986</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Solar Panel (100%)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SolarPanel">
              <SubtypeName>LargeBlockSolarPanel</SubtypeName>
              <EntityId>72744480912797509</EntityId>
              <Min x="0" y="3" z="1" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>0.0487015508115292</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Solar Panel 2 (100%)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SolarPanel">
              <SubtypeName>LargeBlockSolarPanel</SubtypeName>
              <EntityId>143737872950498439</EntityId>
              <Min x="0" y="1" z="-4" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>0.0487164109945297</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Solar Panel 3 (100%)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>LargeBlockArmorSlope</SubtypeName>
              <Min x="0" y="4" z="0" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <BuiltBy>144115188075855897</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SolarPanel">
              <SubtypeName>LargeBlockSolarPanel</SubtypeName>
              <EntityId>123822603375389800</EntityId>
              <Min x="0" y="3" z="-4" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <Owner>144115188075855897</Owner>
              <BuiltBy>144115188075855897</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>0.0487283319234848</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Solar Panel 4 (100%)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="0.060129758" y="-0.0161338" z="0.00175673515" />
          <AngularVelocity x="0.005155863" y="0.00195361418" z="0.00337541872" />
          <DisplayName>Large Grid 8946</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
      </CubeGrids>
      <EnvironmentType>None</EnvironmentType>
      <WorkshopId>0</WorkshopId>
      <OwnerSteamId>76561198030778654</OwnerSteamId>
      <Points>0</Points>
    </Prefab>
  </Prefabs>
</Definitions>